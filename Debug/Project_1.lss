
Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00004316  000043aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f0  008000f0  0000443a  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  0000443c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d2c  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008253  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b399  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 21 	call	0x4208	; 0x4208 <main>
      8a:	0c 94 89 21 	jmp	0x4312	; 0x4312 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ee       	ldi	r26, 0xE8	; 232
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 21 	jmp	0x426a	; 0x426a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 21 	jmp	0x426a	; 0x426a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ee       	ldi	r24, 0xE8	; 232
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 21 	jmp	0x422a	; 0x422a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ee       	ldi	r22, 0xE8	; 232
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 21 	jmp	0x426a	; 0x426a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 21 	jmp	0x426a	; 0x426a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 21 	jmp	0x426a	; 0x426a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_SetupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_SetupPinDirection( GPIO_PortType port , GPIO_PinType pin , GPIO_DirectionType direction )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_SetupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_SetupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <GPIO_SetupPinDirection+0x2a>
     cc6:	47 c0       	rjmp	.+142    	; 0xd56 <GPIO_SetupPinDirection+0xb8>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <GPIO_SetupPinDirection+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <GPIO_SetupPinDirection+0x58>
     cda:	cb c0       	rjmp	.+406    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <GPIO_SetupPinDirection+0x4a>
     ce6:	67 c0       	rjmp	.+206    	; 0xdb6 <GPIO_SetupPinDirection+0x118>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <GPIO_SetupPinDirection+0x56>
     cf2:	91 c0       	rjmp	.+290    	; 0xe16 <GPIO_SetupPinDirection+0x178>
     cf4:	be c0       	rjmp	.+380    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
	{
	case PORTA_ID :

		if(direction == OUTPUT )
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <GPIO_SetupPinDirection+0x86>
		{
			SET_BIT( DDRA ,pin);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_SetupPinDirection+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_SetupPinDirection+0x78>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	a7 c0       	rjmp	.+334    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
		}
		else if (direction == INPUT )
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	88 23       	and	r24, r24
     d28:	09 f0       	breq	.+2      	; 0xd2c <GPIO_SetupPinDirection+0x8e>
     d2a:	a3 c0       	rjmp	.+326    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
		{
			CLEAR_BIT( DDRA , pin);
     d2c:	aa e3       	ldi	r26, 0x3A	; 58
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e3       	ldi	r30, 0x3A	; 58
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <GPIO_SetupPinDirection+0xac>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <GPIO_SetupPinDirection+0xa8>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	8e c0       	rjmp	.+284    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>

		break ;

	case PORTB_ID :

		if(direction == OUTPUT )
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	a1 f4       	brne	.+40     	; 0xd84 <GPIO_SetupPinDirection+0xe6>
				{
					SET_BIT( DDRB ,pin);
     d5c:	a7 e3       	ldi	r26, 0x37	; 55
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e7 e3       	ldi	r30, 0x37	; 55
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <GPIO_SetupPinDirection+0xdc>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <GPIO_SetupPinDirection+0xd8>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	77 c0       	rjmp	.+238    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				}
				else if (direction == INPUT )
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	09 f0       	breq	.+2      	; 0xd8c <GPIO_SetupPinDirection+0xee>
     d8a:	73 c0       	rjmp	.+230    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				{
					CLEAR_BIT( DDRB , pin);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_SetupPinDirection+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_SetupPinDirection+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	5e c0       	rjmp	.+188    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>

		break ;

	case PORTC_ID :

		if(direction == OUTPUT )
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <GPIO_SetupPinDirection+0x146>
				{
					SET_BIT( DDRC ,pin);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_SetupPinDirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_SetupPinDirection+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	47 c0       	rjmp	.+142    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				}
				else if (direction == INPUT )
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	88 23       	and	r24, r24
     de8:	09 f0       	breq	.+2      	; 0xdec <GPIO_SetupPinDirection+0x14e>
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				{
					CLEAR_BIT( DDRC , pin);
     dec:	a4 e3       	ldi	r26, 0x34	; 52
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e4 e3       	ldi	r30, 0x34	; 52
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <GPIO_SetupPinDirection+0x16c>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <GPIO_SetupPinDirection+0x168>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	2e c0       	rjmp	.+92     	; 0xe72 <GPIO_SetupPinDirection+0x1d4>

		break ;

	case PORTD_ID :

		if(direction == OUTPUT )
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <GPIO_SetupPinDirection+0x1a6>
				{
					SET_BIT( DDRD ,pin);
     e1c:	a1 e3       	ldi	r26, 0x31	; 49
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_SetupPinDirection+0x19c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_SetupPinDirection+0x198>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				}
				else if (direction == INPUT )
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 23       	and	r24, r24
     e48:	a1 f4       	brne	.+40     	; 0xe72 <GPIO_SetupPinDirection+0x1d4>
				{
					CLEAR_BIT( DDRD , pin);
     e4a:	a1 e3       	ldi	r26, 0x31	; 49
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_SetupPinDirection+0x1ca>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_SetupPinDirection+0x1c6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
		break ;

	}


}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <GPIO_WritePin>:
/*
 * Description :
 * A function to Write pin with 1 or 0
 */
void GPIO_WritePin( GPIO_PortType port , GPIO_PinType pin , GPIO_OutputValueType value )
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <GPIO_WritePin+0x6>
     e88:	00 d0       	rcall	.+0      	; 0xe8a <GPIO_WritePin+0x8>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	6a 83       	std	Y+2, r22	; 0x02
     e94:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3d 83       	std	Y+5, r19	; 0x05
     e9e:	2c 83       	std	Y+4, r18	; 0x04
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <GPIO_WritePin+0x2a>
     eaa:	47 c0       	rjmp	.+142    	; 0xf3a <GPIO_WritePin+0xb8>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	2c f4       	brge	.+10     	; 0xec0 <GPIO_WritePin+0x3e>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	71 f0       	breq	.+28     	; 0xeda <GPIO_WritePin+0x58>
     ebe:	cb c0       	rjmp	.+406    	; 0x1056 <GPIO_WritePin+0x1d4>
     ec0:	2c 81       	ldd	r18, Y+4	; 0x04
     ec2:	3d 81       	ldd	r19, Y+5	; 0x05
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <GPIO_WritePin+0x4a>
     eca:	67 c0       	rjmp	.+206    	; 0xf9a <GPIO_WritePin+0x118>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <GPIO_WritePin+0x56>
     ed6:	91 c0       	rjmp	.+290    	; 0xffa <GPIO_WritePin+0x178>
     ed8:	be c0       	rjmp	.+380    	; 0x1056 <GPIO_WritePin+0x1d4>
		{
		case PORTA_ID :

					if(value == HIGH )
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	a1 f4       	brne	.+40     	; 0xf08 <GPIO_WritePin+0x86>
					{
						SET_BIT( PORTA ,pin);
     ee0:	ab e3       	ldi	r26, 0x3B	; 59
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e3       	ldi	r30, 0x3B	; 59
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_WritePin+0x7c>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_WritePin+0x78>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	a7 c0       	rjmp	.+334    	; 0x1056 <GPIO_WritePin+0x1d4>
					}
					else if (value == LOW )
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <GPIO_WritePin+0x8e>
     f0e:	a3 c0       	rjmp	.+326    	; 0x1056 <GPIO_WritePin+0x1d4>
					{
						CLEAR_BIT( PORTA , pin);
     f10:	ab e3       	ldi	r26, 0x3B	; 59
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_WritePin+0xac>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_WritePin+0xa8>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	8e c0       	rjmp	.+284    	; 0x1056 <GPIO_WritePin+0x1d4>

			break ;

		case PORTB_ID :

			        if(value == HIGH )
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <GPIO_WritePin+0xe6>
					{
						SET_BIT( PORTB ,pin);
     f40:	a8 e3       	ldi	r26, 0x38	; 56
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e8 e3       	ldi	r30, 0x38	; 56
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_WritePin+0xdc>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_WritePin+0xd8>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	77 c0       	rjmp	.+238    	; 0x1056 <GPIO_WritePin+0x1d4>
					}
					else if (value == LOW )
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <GPIO_WritePin+0xee>
     f6e:	73 c0       	rjmp	.+230    	; 0x1056 <GPIO_WritePin+0x1d4>
					{
						CLEAR_BIT( PORTB , pin);
     f70:	a8 e3       	ldi	r26, 0x38	; 56
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e3       	ldi	r30, 0x38	; 56
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_WritePin+0x10c>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_WritePin+0x108>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	5e c0       	rjmp	.+188    	; 0x1056 <GPIO_WritePin+0x1d4>

			break ;

		case PORTC_ID :

			        if(value == HIGH  )
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <GPIO_WritePin+0x146>
					{
						SET_BIT( PORTC ,pin);
     fa0:	a5 e3       	ldi	r26, 0x35	; 53
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e3       	ldi	r30, 0x35	; 53
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_WritePin+0x13c>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_WritePin+0x138>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	47 c0       	rjmp	.+142    	; 0x1056 <GPIO_WritePin+0x1d4>
					}
					else if (value == LOW)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 23       	and	r24, r24
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <GPIO_WritePin+0x14e>
     fce:	43 c0       	rjmp	.+134    	; 0x1056 <GPIO_WritePin+0x1d4>
					{
						CLEAR_BIT( PORTC , pin);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_WritePin+0x16c>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_WritePin+0x168>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	2e c0       	rjmp	.+92     	; 0x1056 <GPIO_WritePin+0x1d4>

			break ;

		case PORTD_ID :

			       if(value == HIGH  )
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	a1 f4       	brne	.+40     	; 0x1028 <GPIO_WritePin+0x1a6>
					{
						SET_BIT( PORTD ,pin);
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_WritePin+0x19c>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_WritePin+0x198>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	17 c0       	rjmp	.+46     	; 0x1056 <GPIO_WritePin+0x1d4>
					}
					else if (value == LOW )
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 23       	and	r24, r24
    102c:	a1 f4       	brne	.+40     	; 0x1056 <GPIO_WritePin+0x1d4>
					{
						CLEAR_BIT( PORTD , pin);
    102e:	a2 e3       	ldi	r26, 0x32	; 50
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e2 e3       	ldi	r30, 0x32	; 50
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <GPIO_WritePin+0x1ca>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <GPIO_WritePin+0x1c6>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24

		default :

			break;
		}
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <GPIO_ReadPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
u8 GPIO_ReadPin( GPIO_PortType port , GPIO_PinType pin )
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_ReadPin+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_ReadPin+0x8>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
	u8 Reading = 0x00;
    1078:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	4c 81       	ldd	r20, Y+4	; 0x04
    1086:	5d 81       	ldd	r21, Y+5	; 0x05
    1088:	41 30       	cpi	r20, 0x01	; 1
    108a:	51 05       	cpc	r21, r1
    108c:	41 f1       	breq	.+80     	; 0x10de <GPIO_ReadPin+0x78>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	91 05       	cpc	r25, r1
    1096:	34 f4       	brge	.+12     	; 0x10a4 <GPIO_ReadPin+0x3e>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <GPIO_ReadPin+0x54>
    10a2:	52 c0       	rjmp	.+164    	; 0x1148 <GPIO_ReadPin+0xe2>
    10a4:	4c 81       	ldd	r20, Y+4	; 0x04
    10a6:	5d 81       	ldd	r21, Y+5	; 0x05
    10a8:	42 30       	cpi	r20, 0x02	; 2
    10aa:	51 05       	cpc	r21, r1
    10ac:	51 f1       	breq	.+84     	; 0x1102 <GPIO_ReadPin+0x9c>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	b9 f1       	breq	.+110    	; 0x1126 <GPIO_ReadPin+0xc0>
    10b8:	47 c0       	rjmp	.+142    	; 0x1148 <GPIO_ReadPin+0xe2>
	{
	case PORTA_ID :
		Reading = GET_BIT( PINA , pin ) ;
    10ba:	e9 e3       	ldi	r30, 0x39	; 57
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_ReadPin+0x6c>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_ReadPin+0x68>
    10d6:	ca 01       	movw	r24, r20
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	35 c0       	rjmp	.+106    	; 0x1148 <GPIO_ReadPin+0xe2>
		break ;
	case PORTB_ID :
		Reading = GET_BIT( PINB , pin ) ;
    10de:	e6 e3       	ldi	r30, 0x36	; 54
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_ReadPin+0x90>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_ReadPin+0x8c>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	23 c0       	rjmp	.+70     	; 0x1148 <GPIO_ReadPin+0xe2>
		break ;
	case PORTC_ID :
		Reading = GET_BIT( PINC , pin ) ;
    1102:	e3 e3       	ldi	r30, 0x33	; 51
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_ReadPin+0xb4>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_ReadPin+0xb0>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <GPIO_ReadPin+0xe2>
		break ;
	case PORTD_ID :
		Reading = GET_BIT( PIND , pin ) ;
    1126:	e0 e3       	ldi	r30, 0x30	; 48
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_ReadPin+0xd8>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_ReadPin+0xd4>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	return Reading ;
    1148:	89 81       	ldd	r24, Y+1	; 0x01


}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <GPIO_SetupPortDirection>:
/*
 * Description :
 * A function to set whole port direction
 */
void GPIO_SetupPortDirection( GPIO_PortType port , u8 direction )
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_SetupPortDirection+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_SetupPortDirection+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3c 83       	std	Y+4, r19	; 0x04
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	d1 f0       	breq	.+52     	; 0x11b2 <GPIO_SetupPortDirection+0x58>
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <GPIO_SetupPortDirection+0x38>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <GPIO_SetupPortDirection+0x4e>
    1190:	1e c0       	rjmp	.+60     	; 0x11ce <GPIO_SetupPortDirection+0x74>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <GPIO_SetupPortDirection+0x62>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <GPIO_SetupPortDirection+0x6c>
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <GPIO_SetupPortDirection+0x74>
	{
	case PORTA_ID :
		DDRA = direction ;
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	0e c0       	rjmp	.+28     	; 0x11ce <GPIO_SetupPortDirection+0x74>
	 break ;

	case PORTB_ID :
		DDRB = direction ;
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <GPIO_SetupPortDirection+0x74>
		 break ;

	case PORTC_ID :
		DDRC = direction ;
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <GPIO_SetupPortDirection+0x74>
		 break ;

	case PORTD_ID :
		DDRD = direction ;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
		 break ;
	default :
		break;

	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <GPIO_WritePort>:
/*
 * Description :
 * A function to write whole port with any value
 */
void GPIO_WritePort( GPIO_PortType port , u8 value )
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_WritePort+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <GPIO_WritePort+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	d1 f0       	breq	.+52     	; 0x1234 <GPIO_WritePort+0x58>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <GPIO_WritePort+0x38>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 f0       	breq	.+24     	; 0x122a <GPIO_WritePort+0x4e>
    1212:	1e c0       	rjmp	.+60     	; 0x1250 <GPIO_WritePort+0x74>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	81 f0       	breq	.+32     	; 0x123e <GPIO_WritePort+0x62>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <GPIO_WritePort+0x6c>
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <GPIO_WritePort+0x74>
			{
			case PORTA_ID :
					PORTA = value ;
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	80 83       	st	Z, r24
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <GPIO_WritePort+0x74>
				break ;

			case PORTB_ID :
				PORTB = value ;
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <GPIO_WritePort+0x74>
				break ;

			case PORTC_ID :
				PORTC = value ;
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <GPIO_WritePort+0x74>
				break ;

			case PORTD_ID :
				PORTD = value ;
    1248:	e2 e3       	ldi	r30, 0x32	; 50
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
				break ;

			default :
				break;
			}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <GPIO_ReadPort>:
/*
 * Description :
 * A function to read whole port
 */
u8 GPIO_ReadPort( GPIO_PortType port )
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <GPIO_ReadPort+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_ReadPort+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Reading = 0x00;
    126c:	19 82       	std	Y+1, r1	; 0x01
		switch(port)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	d1 f0       	breq	.+52     	; 0x12b6 <GPIO_ReadPort+0x58>
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <GPIO_ReadPort+0x38>
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	61 f0       	breq	.+24     	; 0x12ac <GPIO_ReadPort+0x4e>
    1294:	1e c0       	rjmp	.+60     	; 0x12d2 <GPIO_ReadPort+0x74>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <GPIO_ReadPort+0x62>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <GPIO_ReadPort+0x6c>
    12aa:	13 c0       	rjmp	.+38     	; 0x12d2 <GPIO_ReadPort+0x74>
		{
		case PORTA_ID :
			Reading = PINA ;
    12ac:	e9 e3       	ldi	r30, 0x39	; 57
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <GPIO_ReadPort+0x74>
			break ;
		case PORTB_ID :
			Reading = PINB ;
    12b6:	e6 e3       	ldi	r30, 0x36	; 54
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <GPIO_ReadPort+0x74>
			break ;
		case PORTC_ID :
			Reading = PINC ;
    12c0:	e3 e3       	ldi	r30, 0x33	; 51
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <GPIO_ReadPort+0x74>
			break ;
		case PORTD_ID :
			Reading = PIND ;
    12ca:	e0 e3       	ldi	r30, 0x30	; 48
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	89 83       	std	Y+1, r24	; 0x01
			break ;
		}
		return Reading ;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <KEYPAD_GetPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
u8 KEYPAD_GetPressedKey( void )
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <KEYPAD_GetPressedKey+0x6>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	u8 row = 0 , col = 0 ;
    12ec:	1a 82       	std	Y+2, r1	; 0x02
    12ee:	19 82       	std	Y+1, r1	; 0x01

	/* configure both of row and col pins as input */

	GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID , INPUT ) ;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN1_ID , INPUT ) ;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN2_ID , INPUT ) ;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN3_ID , INPUT ) ;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>

	GPIO_SetupPinDirection( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN0_ID , INPUT ) ;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	64 e0       	ldi	r22, 0x04	; 4
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN1_ID , INPUT ) ;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	65 e0       	ldi	r22, 0x05	; 5
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN2_ID , INPUT ) ;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	66 e0       	ldi	r22, 0x06	; 6
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
#if( KEYPAD_NUM_COLS == 4 )
	GPIO_SetupPinDirection( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN3_ID , INPUT ) ;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	67 e0       	ldi	r22, 0x07	; 7
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
#endif

	while(1)
	{
		for ( row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    1340:	1a 82       	std	Y+2, r1	; 0x02
    1342:	33 c0       	rjmp	.+102    	; 0x13aa <KEYPAD_GetPressedKey+0xc8>
		{
			GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID+row , OUTPUT ) ;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	6a 81       	ldd	r22, Y+2	; 0x02
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
			GPIO_WritePin( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID+row , KEYPAD_BUTTON_PRESSED ) ;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	6a 81       	ldd	r22, Y+2	; 0x02
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>

			for ( col = 0 ; col < KEYPAD_NUM_COLS ; col++ )
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	1c c0       	rjmp	.+56     	; 0x1394 <KEYPAD_GetPressedKey+0xb2>
			{
				if ( GPIO_ReadPin( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN0_ID +col ) == KEYPAD_BUTTON_PRESSED )
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	98 2f       	mov	r25, r24
    1360:	9c 5f       	subi	r25, 0xFC	; 252
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	69 2f       	mov	r22, r25
    1366:	0e 94 33 08 	call	0x1066	; 0x1066 <GPIO_ReadPin>
    136a:	88 23       	and	r24, r24
    136c:	81 f4       	brne	.+32     	; 0x138e <KEYPAD_GetPressedKey+0xac>
				{
					return ( ( row * KEYPAD_NUM_COLS ) + col + 1 ) ;
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	98 2f       	mov	r25, r24
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	89 0f       	add	r24, r25
    1382:	8f 5f       	subi	r24, 0xFF	; 255
	}




}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret
		for ( row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
		{
			GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID+row , OUTPUT ) ;
			GPIO_WritePin( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID+row , KEYPAD_BUTTON_PRESSED ) ;

			for ( col = 0 ; col < KEYPAD_NUM_COLS ; col++ )
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	08 f3       	brcs	.-62     	; 0x135c <KEYPAD_GetPressedKey+0x7a>
				{
					return ( ( row * KEYPAD_NUM_COLS ) + col + 1 ) ;
				}
			}

			GPIO_SetupPinDirection( KEYPAD_ROW_PORT_ID , KEYPAD_ROW_PIN0_ID+row , INPUT ) ;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	6a 81       	ldd	r22, Y+2	; 0x02
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( KEYPAD_COL_PORT_ID , KEYPAD_COL_PIN3_ID , INPUT ) ;
#endif

	while(1)
	{
		for ( row = 0 ; row < KEYPAD_NUM_ROWS ; row++)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	50 f2       	brcs	.-108    	; 0x1344 <KEYPAD_GetPressedKey+0x62>
    13b0:	c7 cf       	rjmp	.-114    	; 0x1340 <KEYPAD_GetPressedKey+0x5e>

000013b2 <LCD_Init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the DIO driver.
 * 2. Setup the LCD Data Mode
 */
void LCD_Init(void)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2e 97       	sbiw	r28, 0x0e	; 14
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61

	/* Configure the Enable and RS as output ports */
	GPIO_SetupPinDirection( LCD_RS_PORT_ID , LCD_RS_PIN_ID , OUTPUT );
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( LCD_E_PORT_ID , LCD_E_PIN_ID , OUTPUT );
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	LCD_SendCommand( LCD_TWO_LINES_EIGHT_BITS_MODE );

#elif(LCD_BIT_MODE == 4)

	/* Configure the data pins as output port */
	GPIO_SetupPinDirection( LCD_DATA_PORT_ID , LCD_DATA_PIN0_ID , OUTPUT ) ;
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( LCD_DATA_PORT_ID , LCD_DATA_PIN1_ID , OUTPUT ) ;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( LCD_DATA_PORT_ID , LCD_DATA_PIN2_ID , OUTPUT ) ;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	65 e0       	ldi	r22, 0x05	; 5
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection( LCD_DATA_PORT_ID , LCD_DATA_PIN3_ID , OUTPUT ) ;
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	66 e0       	ldi	r22, 0x06	; 6
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_SetupPinDirection>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a0 ea       	ldi	r26, 0xA0	; 160
    1408:	b1 e4       	ldi	r27, 0x41	; 65
    140a:	8b 87       	std	Y+11, r24	; 0x0b
    140c:	9c 87       	std	Y+12, r25	; 0x0c
    140e:	ad 87       	std	Y+13, r26	; 0x0d
    1410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1412:	6b 85       	ldd	r22, Y+11	; 0x0b
    1414:	7c 85       	ldd	r23, Y+12	; 0x0c
    1416:	8d 85       	ldd	r24, Y+13	; 0x0d
    1418:	9e 85       	ldd	r25, Y+14	; 0x0e
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	4a ef       	ldi	r20, 0xFA	; 250
    1420:	54 e4       	ldi	r21, 0x44	; 68
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	8f 83       	std	Y+7, r24	; 0x07
    142c:	98 87       	std	Y+8, r25	; 0x08
    142e:	a9 87       	std	Y+9, r26	; 0x09
    1430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	5f e3       	ldi	r21, 0x3F	; 63
    1442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1446:	88 23       	and	r24, r24
    1448:	2c f4       	brge	.+10     	; 0x1454 <LCD_Init+0xa2>
		__ticks = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	3f c0       	rjmp	.+126    	; 0x14d2 <LCD_Init+0x120>
	else if (__tmp > 65535)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1468:	18 16       	cp	r1, r24
    146a:	4c f5       	brge	.+82     	; 0x14be <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146c:	6b 85       	ldd	r22, Y+11	; 0x0b
    146e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1470:	8d 85       	ldd	r24, Y+13	; 0x0d
    1472:	9e 85       	ldd	r25, Y+14	; 0x0e
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	0f c0       	rjmp	.+30     	; 0x14b4 <LCD_Init+0x102>
    1496:	88 ec       	ldi	r24, 0xC8	; 200
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <LCD_Init+0xf0>
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	69 f7       	brne	.-38     	; 0x1496 <LCD_Init+0xe4>
    14bc:	14 c0       	rjmp	.+40     	; 0x14e6 <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <LCD_Init+0x12c>
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	/* send command with mode 4 */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    14e6:	83 e3       	ldi	r24, 0x33	; 51
    14e8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    14ec:	82 e3       	ldi	r24, 0x32	; 50
    14ee:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>
	LCD_SendCommand( LCD_TWO_LINES_FOUR_BITS_MODE );
    14f2:	88 e2       	ldi	r24, 0x28	; 40
    14f4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>

#endif

	/* send command cursor off */
	LCD_SendCommand( LCD_CURSOR_OFF );
    14f8:	8c e0       	ldi	r24, 0x0C	; 12
    14fa:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>

	/* send command clear screen */
	LCD_SendCommand( LCD_CLEAR_SCREEN );
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>

}
    1504:	2e 96       	adiw	r28, 0x0e	; 14
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <LCD_SendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_SendCommand(u8 command)
{
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	c9 5a       	subi	r28, 0xA9	; 169
    1524:	d0 40       	sbci	r29, 0x00	; 0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	fe 01       	movw	r30, r28
    1532:	e7 55       	subi	r30, 0x57	; 87
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 83       	st	Z, r24
	/* - Clear RS pin */
	GPIO_WritePin( LCD_RS_PORT_ID  , LCD_RS_PIN_ID , LOW ) ;
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    1542:	fe 01       	movw	r30, r28
    1544:	eb 55       	subi	r30, 0x5B	; 91
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e8       	ldi	r26, 0x80	; 128
    154e:	bf e3       	ldi	r27, 0x3F	; 63
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1558:	8e 01       	movw	r16, r28
    155a:	0f 55       	subi	r16, 0x5F	; 95
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	fe 01       	movw	r30, r28
    1560:	eb 55       	subi	r30, 0x5B	; 91
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	2b ea       	ldi	r18, 0xAB	; 171
    156e:	3a ea       	ldi	r19, 0xAA	; 170
    1570:	4a e2       	ldi	r20, 0x2A	; 42
    1572:	50 e4       	ldi	r21, 0x40	; 64
    1574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	f8 01       	movw	r30, r16
    157e:	80 83       	st	Z, r24
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	a2 83       	std	Z+2, r26	; 0x02
    1584:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1586:	fe 01       	movw	r30, r28
    1588:	ef 55       	subi	r30, 0x5F	; 95
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e8       	ldi	r20, 0x80	; 128
    159a:	5f e3       	ldi	r21, 0x3F	; 63
    159c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	34 f4       	brge	.+12     	; 0x15b0 <LCD_SendCommand+0x9a>
		__ticks = 1;
    15a4:	fe 01       	movw	r30, r28
    15a6:	e0 56       	subi	r30, 0x60	; 96
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
    15ae:	e0 c0       	rjmp	.+448    	; 0x1770 <LCD_SendCommand+0x25a>
	else if (__tmp > 255)
    15b0:	fe 01       	movw	r30, r28
    15b2:	ef 55       	subi	r30, 0x5F	; 95
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	53 e4       	ldi	r21, 0x43	; 67
    15c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <LCD_SendCommand+0xba>
    15ce:	c0 c0       	rjmp	.+384    	; 0x1750 <LCD_SendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	eb 55       	subi	r30, 0x5B	; 91
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a e7       	ldi	r20, 0x7A	; 122
    15e4:	54 e4       	ldi	r21, 0x44	; 68
    15e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	fe 01       	movw	r30, r28
    15f0:	e4 56       	subi	r30, 0x64	; 100
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 83       	st	Z, r24
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	a2 83       	std	Z+2, r26	; 0x02
    15fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fc:	8e 01       	movw	r16, r28
    15fe:	08 56       	subi	r16, 0x68	; 104
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	fe 01       	movw	r30, r28
    1604:	e4 56       	subi	r30, 0x64	; 100
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162a:	fe 01       	movw	r30, r28
    162c:	e8 56       	subi	r30, 0x68	; 104
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	44 f4       	brge	.+16     	; 0x1658 <LCD_SendCommand+0x142>
		__ticks = 1;
    1648:	fe 01       	movw	r30, r28
    164a:	ea 56       	subi	r30, 0x6A	; 106
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	64 c0       	rjmp	.+200    	; 0x1720 <LCD_SendCommand+0x20a>
	else if (__tmp > 65535)
    1658:	fe 01       	movw	r30, r28
    165a:	e8 56       	subi	r30, 0x68	; 104
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <LCD_SendCommand+0x162>
    1676:	43 c0       	rjmp	.+134    	; 0x16fe <LCD_SendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	fe 01       	movw	r30, r28
    167a:	e4 56       	subi	r30, 0x64	; 100
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8e 01       	movw	r16, r28
    1698:	0a 56       	subi	r16, 0x6A	; 106
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	1f c0       	rjmp	.+62     	; 0x16ee <LCD_SendCommand+0x1d8>
    16b0:	fe 01       	movw	r30, r28
    16b2:	ec 56       	subi	r30, 0x6C	; 108
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	88 ec       	ldi	r24, 0xC8	; 200
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	fe 01       	movw	r30, r28
    16c0:	ec 56       	subi	r30, 0x6C	; 108
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCD_SendCommand+0x1b2>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ec 56       	subi	r30, 0x6C	; 108
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	de 01       	movw	r26, r28
    16d8:	aa 56       	subi	r26, 0x6A	; 106
    16da:	bf 4f       	sbci	r27, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	ea 56       	subi	r30, 0x6A	; 106
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	fe 01       	movw	r30, r28
    16f0:	ea 56       	subi	r30, 0x6A	; 106
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	d1 f6       	brne	.-76     	; 0x16b0 <LCD_SendCommand+0x19a>
    16fc:	4b c0       	rjmp	.+150    	; 0x1794 <LCD_SendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	8e 01       	movw	r16, r28
    1700:	0a 56       	subi	r16, 0x6A	; 106
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e8 56       	subi	r30, 0x68	; 104
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
    1720:	de 01       	movw	r26, r28
    1722:	ae 56       	subi	r26, 0x6E	; 110
    1724:	bf 4f       	sbci	r27, 0xFF	; 255
    1726:	fe 01       	movw	r30, r28
    1728:	ea 56       	subi	r30, 0x6A	; 106
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	9c 93       	st	X, r25
    1734:	8e 93       	st	-X, r24
    1736:	fe 01       	movw	r30, r28
    1738:	ee 56       	subi	r30, 0x6E	; 110
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_SendCommand+0x22a>
    1744:	fe 01       	movw	r30, r28
    1746:	ee 56       	subi	r30, 0x6E	; 110
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <LCD_SendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1750:	8e 01       	movw	r16, r28
    1752:	00 56       	subi	r16, 0x60	; 96
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	ef 55       	subi	r30, 0x5F	; 95
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	f8 01       	movw	r30, r16
    176e:	80 83       	st	Z, r24
    1770:	de 01       	movw	r26, r28
    1772:	af 56       	subi	r26, 0x6F	; 111
    1774:	bf 4f       	sbci	r27, 0xFF	; 255
    1776:	fe 01       	movw	r30, r28
    1778:	e0 56       	subi	r30, 0x60	; 96
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1780:	fe 01       	movw	r30, r28
    1782:	ef 56       	subi	r30, 0x6F	; 111
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	8a 95       	dec	r24
    178a:	f1 f7       	brne	.-4      	; 0x1788 <LCD_SendCommand+0x272>
    178c:	fe 01       	movw	r30, r28
    178e:	ef 56       	subi	r30, 0x6F	; 111
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 83       	st	Z, r24

	/* - delay */
	_delay_us(1);

	/* - set enable */
	GPIO_WritePin( LCD_E_PORT_ID , LCD_E_PIN_ID , HIGH );
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    179e:	fe 01       	movw	r30, r28
    17a0:	e3 57       	subi	r30, 0x73	; 115
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e8       	ldi	r26, 0x80	; 128
    17aa:	bf e3       	ldi	r27, 0x3F	; 63
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b4:	8e 01       	movw	r16, r28
    17b6:	07 57       	subi	r16, 0x77	; 119
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	fe 01       	movw	r30, r28
    17bc:	e3 57       	subi	r30, 0x73	; 115
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	2b ea       	ldi	r18, 0xAB	; 171
    17ca:	3a ea       	ldi	r19, 0xAA	; 170
    17cc:	4a e2       	ldi	r20, 0x2A	; 42
    17ce:	50 e4       	ldi	r21, 0x40	; 64
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	f8 01       	movw	r30, r16
    17da:	80 83       	st	Z, r24
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	a2 83       	std	Z+2, r26	; 0x02
    17e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17e2:	fe 01       	movw	r30, r28
    17e4:	e7 57       	subi	r30, 0x77	; 119
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	34 f4       	brge	.+12     	; 0x180c <LCD_SendCommand+0x2f6>
		__ticks = 1;
    1800:	fe 01       	movw	r30, r28
    1802:	e8 57       	subi	r30, 0x78	; 120
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	80 83       	st	Z, r24
    180a:	e0 c0       	rjmp	.+448    	; 0x19cc <LCD_SendCommand+0x4b6>
	else if (__tmp > 255)
    180c:	fe 01       	movw	r30, r28
    180e:	e7 57       	subi	r30, 0x77	; 119
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	0c f0       	brlt	.+2      	; 0x182c <LCD_SendCommand+0x316>
    182a:	c0 c0       	rjmp	.+384    	; 0x19ac <LCD_SendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    182c:	fe 01       	movw	r30, r28
    182e:	e3 57       	subi	r30, 0x73	; 115
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	fe 01       	movw	r30, r28
    184c:	ec 57       	subi	r30, 0x7C	; 124
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	8e 01       	movw	r16, r28
    185a:	00 58       	subi	r16, 0x80	; 128
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	fe 01       	movw	r30, r28
    1860:	ec 57       	subi	r30, 0x7C	; 124
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1886:	fe 01       	movw	r30, r28
    1888:	e0 58       	subi	r30, 0x80	; 128
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	44 f4       	brge	.+16     	; 0x18b4 <LCD_SendCommand+0x39e>
		__ticks = 1;
    18a4:	fe 01       	movw	r30, r28
    18a6:	e2 58       	subi	r30, 0x82	; 130
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	64 c0       	rjmp	.+200    	; 0x197c <LCD_SendCommand+0x466>
	else if (__tmp > 65535)
    18b4:	fe 01       	movw	r30, r28
    18b6:	e0 58       	subi	r30, 0x80	; 128
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	0c f0       	brlt	.+2      	; 0x18d4 <LCD_SendCommand+0x3be>
    18d2:	43 c0       	rjmp	.+134    	; 0x195a <LCD_SendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	fe 01       	movw	r30, r28
    18d6:	ec 57       	subi	r30, 0x7C	; 124
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8e 01       	movw	r16, r28
    18f4:	02 58       	subi	r16, 0x82	; 130
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	f8 01       	movw	r30, r16
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	1f c0       	rjmp	.+62     	; 0x194a <LCD_SendCommand+0x434>
    190c:	fe 01       	movw	r30, r28
    190e:	e4 58       	subi	r30, 0x84	; 132
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191a:	fe 01       	movw	r30, r28
    191c:	e4 58       	subi	r30, 0x84	; 132
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_SendCommand+0x40e>
    1928:	fe 01       	movw	r30, r28
    192a:	e4 58       	subi	r30, 0x84	; 132
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	de 01       	movw	r26, r28
    1934:	a2 58       	subi	r26, 0x82	; 130
    1936:	bf 4f       	sbci	r27, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	e2 58       	subi	r30, 0x82	; 130
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	11 96       	adiw	r26, 0x01	; 1
    1946:	9c 93       	st	X, r25
    1948:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	fe 01       	movw	r30, r28
    194c:	e2 58       	subi	r30, 0x82	; 130
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	d1 f6       	brne	.-76     	; 0x190c <LCD_SendCommand+0x3f6>
    1958:	4b c0       	rjmp	.+150    	; 0x19f0 <LCD_SendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	8e 01       	movw	r16, r28
    195c:	02 58       	subi	r16, 0x82	; 130
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	fe 01       	movw	r30, r28
    1962:	e0 58       	subi	r30, 0x80	; 128
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	f8 01       	movw	r30, r16
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	de 01       	movw	r26, r28
    197e:	a6 58       	subi	r26, 0x86	; 134
    1980:	bf 4f       	sbci	r27, 0xFF	; 255
    1982:	fe 01       	movw	r30, r28
    1984:	e2 58       	subi	r30, 0x82	; 130
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	11 96       	adiw	r26, 0x01	; 1
    198e:	9c 93       	st	X, r25
    1990:	8e 93       	st	-X, r24
    1992:	fe 01       	movw	r30, r28
    1994:	e6 58       	subi	r30, 0x86	; 134
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_SendCommand+0x486>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e6 58       	subi	r30, 0x86	; 134
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	22 c0       	rjmp	.+68     	; 0x19f0 <LCD_SendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ac:	8e 01       	movw	r16, r28
    19ae:	08 57       	subi	r16, 0x78	; 120
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	fe 01       	movw	r30, r28
    19b4:	e7 57       	subi	r30, 0x77	; 119
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 83       	st	Z, r24
    19cc:	de 01       	movw	r26, r28
    19ce:	a7 58       	subi	r26, 0x87	; 135
    19d0:	bf 4f       	sbci	r27, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e8 57       	subi	r30, 0x78	; 120
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19dc:	fe 01       	movw	r30, r28
    19de:	e7 58       	subi	r30, 0x87	; 135
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	8a 95       	dec	r24
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_SendCommand+0x4ce>
    19e8:	fe 01       	movw	r30, r28
    19ea:	e7 58       	subi	r30, 0x87	; 135
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 83       	st	Z, r24
	_delay_us(1);

#elif ( LCD_BIT_MODE == 4 )

		/*  send the 4 MSBs of command*/
	    GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN0_ID , GET_BIT(command,4) );
    19f0:	fe 01       	movw	r30, r28
    19f2:	e7 55       	subi	r30, 0x57	; 87
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	82 95       	swap	r24
    19fa:	8f 70       	andi	r24, 0x0F	; 15
    19fc:	98 2f       	mov	r25, r24
    19fe:	91 70       	andi	r25, 0x01	; 1
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	63 e0       	ldi	r22, 0x03	; 3
    1a04:	49 2f       	mov	r20, r25
    1a06:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN1_ID , GET_BIT(command,5) );
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e7 55       	subi	r30, 0x57	; 87
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	82 95       	swap	r24
    1a14:	86 95       	lsr	r24
    1a16:	87 70       	andi	r24, 0x07	; 7
    1a18:	98 2f       	mov	r25, r24
    1a1a:	91 70       	andi	r25, 0x01	; 1
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	64 e0       	ldi	r22, 0x04	; 4
    1a20:	49 2f       	mov	r20, r25
    1a22:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN2_ID , GET_BIT(command,6) );
    1a26:	fe 01       	movw	r30, r28
    1a28:	e7 55       	subi	r30, 0x57	; 87
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 95       	swap	r24
    1a30:	86 95       	lsr	r24
    1a32:	86 95       	lsr	r24
    1a34:	83 70       	andi	r24, 0x03	; 3
    1a36:	98 2f       	mov	r25, r24
    1a38:	91 70       	andi	r25, 0x01	; 1
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	65 e0       	ldi	r22, 0x05	; 5
    1a3e:	49 2f       	mov	r20, r25
    1a40:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN3_ID , GET_BIT(command,7) );
    1a44:	fe 01       	movw	r30, r28
    1a46:	e7 55       	subi	r30, 0x57	; 87
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	99 27       	eor	r25, r25
    1a52:	99 1f       	adc	r25, r25
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	66 e0       	ldi	r22, 0x06	; 6
    1a58:	49 2f       	mov	r20, r25
    1a5a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	eb 58       	subi	r30, 0x8B	; 139
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a74:	8e 01       	movw	r16, r28
    1a76:	0f 58       	subi	r16, 0x8F	; 143
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	eb 58       	subi	r30, 0x8B	; 139
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	2b ea       	ldi	r18, 0xAB	; 171
    1a8a:	3a ea       	ldi	r19, 0xAA	; 170
    1a8c:	4a e2       	ldi	r20, 0x2A	; 42
    1a8e:	50 e4       	ldi	r21, 0x40	; 64
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	ef 58       	subi	r30, 0x8F	; 143
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	34 f4       	brge	.+12     	; 0x1acc <LCD_SendCommand+0x5b6>
		__ticks = 1;
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e0 59       	subi	r30, 0x90	; 144
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	80 83       	st	Z, r24
    1aca:	e0 c0       	rjmp	.+448    	; 0x1c8c <LCD_SendCommand+0x776>
	else if (__tmp > 255)
    1acc:	fe 01       	movw	r30, r28
    1ace:	ef 58       	subi	r30, 0x8F	; 143
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	0c f0       	brlt	.+2      	; 0x1aec <LCD_SendCommand+0x5d6>
    1aea:	c0 c0       	rjmp	.+384    	; 0x1c6c <LCD_SendCommand+0x756>
	{
		_delay_ms(__us / 1000.0);
    1aec:	fe 01       	movw	r30, r28
    1aee:	eb 58       	subi	r30, 0x8B	; 139
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e4 59       	subi	r30, 0x94	; 148
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	a2 83       	std	Z+2, r26	; 0x02
    1b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	08 59       	subi	r16, 0x98	; 152
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e4 59       	subi	r30, 0x94	; 148
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	80 83       	st	Z, r24
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	a2 83       	std	Z+2, r26	; 0x02
    1b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b46:	fe 01       	movw	r30, r28
    1b48:	e8 59       	subi	r30, 0x98	; 152
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	44 f4       	brge	.+16     	; 0x1b74 <LCD_SendCommand+0x65e>
		__ticks = 1;
    1b64:	fe 01       	movw	r30, r28
    1b66:	ea 59       	subi	r30, 0x9A	; 154
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	64 c0       	rjmp	.+200    	; 0x1c3c <LCD_SendCommand+0x726>
	else if (__tmp > 65535)
    1b74:	fe 01       	movw	r30, r28
    1b76:	e8 59       	subi	r30, 0x98	; 152
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <LCD_SendCommand+0x67e>
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <LCD_SendCommand+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	fe 01       	movw	r30, r28
    1b96:	e4 59       	subi	r30, 0x94	; 148
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0a 59       	subi	r16, 0x9A	; 154
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	1f c0       	rjmp	.+62     	; 0x1c0a <LCD_SendCommand+0x6f4>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ec 59       	subi	r30, 0x9C	; 156
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ec 59       	subi	r30, 0x9C	; 156
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_SendCommand+0x6ce>
    1be8:	fe 01       	movw	r30, r28
    1bea:	ec 59       	subi	r30, 0x9C	; 156
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	de 01       	movw	r26, r28
    1bf4:	aa 59       	subi	r26, 0x9A	; 154
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ea 59       	subi	r30, 0x9A	; 154
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	9c 93       	st	X, r25
    1c08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ea 59       	subi	r30, 0x9A	; 154
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	d1 f6       	brne	.-76     	; 0x1bcc <LCD_SendCommand+0x6b6>
    1c18:	4b c0       	rjmp	.+150    	; 0x1cb0 <LCD_SendCommand+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	0a 59       	subi	r16, 0x9A	; 154
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	e8 59       	subi	r30, 0x98	; 152
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	de 01       	movw	r26, r28
    1c3e:	ae 59       	subi	r26, 0x9E	; 158
    1c40:	bf 4f       	sbci	r27, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	ea 59       	subi	r30, 0x9A	; 154
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 93       	st	X, r25
    1c50:	8e 93       	st	-X, r24
    1c52:	fe 01       	movw	r30, r28
    1c54:	ee 59       	subi	r30, 0x9E	; 158
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_SendCommand+0x746>
    1c60:	fe 01       	movw	r30, r28
    1c62:	ee 59       	subi	r30, 0x9E	; 158
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	22 c0       	rjmp	.+68     	; 0x1cb0 <LCD_SendCommand+0x79a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	00 59       	subi	r16, 0x90	; 144
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	ef 58       	subi	r30, 0x8F	; 143
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
    1c8c:	de 01       	movw	r26, r28
    1c8e:	af 59       	subi	r26, 0x9F	; 159
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e0 59       	subi	r30, 0x90	; 144
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ef 59       	subi	r30, 0x9F	; 159
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8a 95       	dec	r24
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_SendCommand+0x78e>
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ef 59       	subi	r30, 0x9F	; 159
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 83       	st	Z, r24

		/*  delay */
		_delay_us(1);

		/*  clear enable */
		GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , LOW );
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e3 5a       	subi	r30, 0xA3	; 163
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e8       	ldi	r26, 0x80	; 128
    1cc6:	bf e3       	ldi	r27, 0x3F	; 63
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	07 5a       	subi	r16, 0xA7	; 167
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e3 5a       	subi	r30, 0xA3	; 163
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	2b ea       	ldi	r18, 0xAB	; 171
    1ce6:	3a ea       	ldi	r19, 0xAA	; 170
    1ce8:	4a e2       	ldi	r20, 0x2A	; 42
    1cea:	50 e4       	ldi	r21, 0x40	; 64
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	80 83       	st	Z, r24
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	a2 83       	std	Z+2, r26	; 0x02
    1cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e7 5a       	subi	r30, 0xA7	; 167
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	34 f4       	brge	.+12     	; 0x1d28 <LCD_SendCommand+0x812>
		__ticks = 1;
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e8 5a       	subi	r30, 0xA8	; 168
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 83       	st	Z, r24
    1d26:	e0 c0       	rjmp	.+448    	; 0x1ee8 <LCD_SendCommand+0x9d2>
	else if (__tmp > 255)
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e7 5a       	subi	r30, 0xA7	; 167
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	53 e4       	ldi	r21, 0x43	; 67
    1d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <LCD_SendCommand+0x832>
    1d46:	c0 c0       	rjmp	.+384    	; 0x1ec8 <LCD_SendCommand+0x9b2>
	{
		_delay_ms(__us / 1000.0);
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 5a       	subi	r30, 0xA3	; 163
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	fe 01       	movw	r30, r28
    1d68:	ec 5a       	subi	r30, 0xAC	; 172
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	a2 83       	std	Z+2, r26	; 0x02
    1d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	8e 01       	movw	r16, r28
    1d76:	00 5b       	subi	r16, 0xB0	; 176
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ec 5a       	subi	r30, 0xAC	; 172
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	80 83       	st	Z, r24
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	a2 83       	std	Z+2, r26	; 0x02
    1da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e0 5b       	subi	r30, 0xB0	; 176
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	44 f4       	brge	.+16     	; 0x1dd0 <LCD_SendCommand+0x8ba>
		__ticks = 1;
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e2 5b       	subi	r30, 0xB2	; 178
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	64 c0       	rjmp	.+200    	; 0x1e98 <LCD_SendCommand+0x982>
	else if (__tmp > 65535)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e0 5b       	subi	r30, 0xB0	; 176
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <LCD_SendCommand+0x8da>
    1dee:	43 c0       	rjmp	.+134    	; 0x1e76 <LCD_SendCommand+0x960>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	fe 01       	movw	r30, r28
    1df2:	ec 5a       	subi	r30, 0xAC	; 172
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8e 01       	movw	r16, r28
    1e10:	02 5b       	subi	r16, 0xB2	; 178
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	1f c0       	rjmp	.+62     	; 0x1e66 <LCD_SendCommand+0x950>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e4 5b       	subi	r30, 0xB4	; 180
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e36:	fe 01       	movw	r30, r28
    1e38:	e4 5b       	subi	r30, 0xB4	; 180
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_SendCommand+0x92a>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e4 5b       	subi	r30, 0xB4	; 180
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	de 01       	movw	r26, r28
    1e50:	a2 5b       	subi	r26, 0xB2	; 178
    1e52:	bf 4f       	sbci	r27, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	e2 5b       	subi	r30, 0xB2	; 178
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	9c 93       	st	X, r25
    1e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	fe 01       	movw	r30, r28
    1e68:	e2 5b       	subi	r30, 0xB2	; 178
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	d1 f6       	brne	.-76     	; 0x1e28 <LCD_SendCommand+0x912>
    1e74:	4b c0       	rjmp	.+150    	; 0x1f0c <LCD_SendCommand+0x9f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	8e 01       	movw	r16, r28
    1e78:	02 5b       	subi	r16, 0xB2	; 178
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e0 5b       	subi	r30, 0xB0	; 176
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	de 01       	movw	r26, r28
    1e9a:	a6 5b       	subi	r26, 0xB6	; 182
    1e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e2 5b       	subi	r30, 0xB2	; 178
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e6 5b       	subi	r30, 0xB6	; 182
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD_SendCommand+0x9a2>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e6 5b       	subi	r30, 0xB6	; 182
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	22 c0       	rjmp	.+68     	; 0x1f0c <LCD_SendCommand+0x9f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ec8:	8e 01       	movw	r16, r28
    1eca:	08 5a       	subi	r16, 0xA8	; 168
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 5a       	subi	r30, 0xA7	; 167
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 83       	st	Z, r24
    1ee8:	de 01       	movw	r26, r28
    1eea:	a7 5b       	subi	r26, 0xB7	; 183
    1eec:	bf 4f       	sbci	r27, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e8 5a       	subi	r30, 0xA8	; 168
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5b       	subi	r30, 0xB7	; 183
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	8a 95       	dec	r24
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_SendCommand+0x9ea>
    1f04:	fe 01       	movw	r30, r28
    1f06:	e7 5b       	subi	r30, 0xB7	; 183
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 83       	st	Z, r24

		/*  delay */
		_delay_us(1);

		/*  set enable */
		GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , HIGH );
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    1f16:	fe 01       	movw	r30, r28
    1f18:	eb 5b       	subi	r30, 0xBB	; 187
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e8       	ldi	r26, 0x80	; 128
    1f22:	bf e3       	ldi	r27, 0x3F	; 63
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	0f 5b       	subi	r16, 0xBF	; 191
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	eb 5b       	subi	r30, 0xBB	; 187
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	2b ea       	ldi	r18, 0xAB	; 171
    1f42:	3a ea       	ldi	r19, 0xAA	; 170
    1f44:	4a e2       	ldi	r20, 0x2A	; 42
    1f46:	50 e4       	ldi	r21, 0x40	; 64
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ef 5b       	subi	r30, 0xBF	; 191
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	34 f4       	brge	.+12     	; 0x1f84 <LCD_SendCommand+0xa6e>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e0 5c       	subi	r30, 0xC0	; 192
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 83       	st	Z, r24
    1f82:	9d c0       	rjmp	.+314    	; 0x20be <LCD_SendCommand+0xba8>
	else if (__tmp > 255)
    1f84:	fe 01       	movw	r30, r28
    1f86:	ef 5b       	subi	r30, 0xBF	; 191
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	0c f0       	brlt	.+2      	; 0x1fa4 <LCD_SendCommand+0xa8e>
    1fa2:	7e c0       	rjmp	.+252    	; 0x20a0 <LCD_SendCommand+0xb8a>
	{
		_delay_ms(__us / 1000.0);
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	eb 5b       	subi	r30, 0xBB	; 187
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8c af       	std	Y+60, r24	; 0x3c
    1fc4:	9d af       	std	Y+61, r25	; 0x3d
    1fc6:	ae af       	std	Y+62, r26	; 0x3e
    1fc8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fcc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fce:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	88 af       	std	Y+56, r24	; 0x38
    1fe4:	99 af       	std	Y+57, r25	; 0x39
    1fe6:	aa af       	std	Y+58, r26	; 0x3a
    1fe8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1fea:	68 ad       	ldd	r22, Y+56	; 0x38
    1fec:	79 ad       	ldd	r23, Y+57	; 0x39
    1fee:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ff0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <LCD_SendCommand+0xaf6>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9f ab       	std	Y+55, r25	; 0x37
    2008:	8e ab       	std	Y+54, r24	; 0x36
    200a:	3f c0       	rjmp	.+126    	; 0x208a <LCD_SendCommand+0xb74>
	else if (__tmp > 65535)
    200c:	68 ad       	ldd	r22, Y+56	; 0x38
    200e:	79 ad       	ldd	r23, Y+57	; 0x39
    2010:	8a ad       	ldd	r24, Y+58	; 0x3a
    2012:	9b ad       	ldd	r25, Y+59	; 0x3b
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <LCD_SendCommand+0xb60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	6c ad       	ldd	r22, Y+60	; 0x3c
    2026:	7d ad       	ldd	r23, Y+61	; 0x3d
    2028:	8e ad       	ldd	r24, Y+62	; 0x3e
    202a:	9f ad       	ldd	r25, Y+63	; 0x3f
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9f ab       	std	Y+55, r25	; 0x37
    204a:	8e ab       	std	Y+54, r24	; 0x36
    204c:	0f c0       	rjmp	.+30     	; 0x206c <LCD_SendCommand+0xb56>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9d ab       	std	Y+53, r25	; 0x35
    2054:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2056:	8c a9       	ldd	r24, Y+52	; 0x34
    2058:	9d a9       	ldd	r25, Y+53	; 0x35
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_SendCommand+0xb44>
    205e:	9d ab       	std	Y+53, r25	; 0x35
    2060:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8e a9       	ldd	r24, Y+54	; 0x36
    2064:	9f a9       	ldd	r25, Y+55	; 0x37
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9f ab       	std	Y+55, r25	; 0x37
    206a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8e a9       	ldd	r24, Y+54	; 0x36
    206e:	9f a9       	ldd	r25, Y+55	; 0x37
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <LCD_SendCommand+0xb38>
    2074:	2d c0       	rjmp	.+90     	; 0x20d0 <LCD_SendCommand+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	68 ad       	ldd	r22, Y+56	; 0x38
    2078:	79 ad       	ldd	r23, Y+57	; 0x39
    207a:	8a ad       	ldd	r24, Y+58	; 0x3a
    207c:	9b ad       	ldd	r25, Y+59	; 0x3b
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9f ab       	std	Y+55, r25	; 0x37
    2088:	8e ab       	std	Y+54, r24	; 0x36
    208a:	8e a9       	ldd	r24, Y+54	; 0x36
    208c:	9f a9       	ldd	r25, Y+55	; 0x37
    208e:	9b ab       	std	Y+51, r25	; 0x33
    2090:	8a ab       	std	Y+50, r24	; 0x32
    2092:	8a a9       	ldd	r24, Y+50	; 0x32
    2094:	9b a9       	ldd	r25, Y+51	; 0x33
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_SendCommand+0xb80>
    209a:	9b ab       	std	Y+51, r25	; 0x33
    209c:	8a ab       	std	Y+50, r24	; 0x32
    209e:	18 c0       	rjmp	.+48     	; 0x20d0 <LCD_SendCommand+0xbba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20a0:	fe 01       	movw	r30, r28
    20a2:	ef 5b       	subi	r30, 0xBF	; 191
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	fe 01       	movw	r30, r28
    20b8:	e0 5c       	subi	r30, 0xC0	; 192
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 83       	st	Z, r24
    20be:	fe 01       	movw	r30, r28
    20c0:	e0 5c       	subi	r30, 0xC0	; 192
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c8:	89 a9       	ldd	r24, Y+49	; 0x31
    20ca:	8a 95       	dec	r24
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_SendCommand+0xbb4>
    20ce:	89 ab       	std	Y+49, r24	; 0x31

		/*  delay */
		_delay_us(1);

		/*  send the 4 LSBs of command*/
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN0_ID , GET_BIT(command,0) );
    20d0:	fe 01       	movw	r30, r28
    20d2:	e7 55       	subi	r30, 0x57	; 87
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	98 2f       	mov	r25, r24
    20da:	91 70       	andi	r25, 0x01	; 1
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	63 e0       	ldi	r22, 0x03	; 3
    20e0:	49 2f       	mov	r20, r25
    20e2:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN1_ID , GET_BIT(command,1) );
    20e6:	fe 01       	movw	r30, r28
    20e8:	e7 55       	subi	r30, 0x57	; 87
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	86 95       	lsr	r24
    20f0:	98 2f       	mov	r25, r24
    20f2:	91 70       	andi	r25, 0x01	; 1
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	64 e0       	ldi	r22, 0x04	; 4
    20f8:	49 2f       	mov	r20, r25
    20fa:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN2_ID , GET_BIT(command,2) );
    20fe:	fe 01       	movw	r30, r28
    2100:	e7 55       	subi	r30, 0x57	; 87
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	86 95       	lsr	r24
    2108:	86 95       	lsr	r24
    210a:	98 2f       	mov	r25, r24
    210c:	91 70       	andi	r25, 0x01	; 1
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	65 e0       	ldi	r22, 0x05	; 5
    2112:	49 2f       	mov	r20, r25
    2114:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
		GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN3_ID , GET_BIT(command,3) );
    2118:	fe 01       	movw	r30, r28
    211a:	e7 55       	subi	r30, 0x57	; 87
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	86 95       	lsr	r24
    2122:	86 95       	lsr	r24
    2124:	86 95       	lsr	r24
    2126:	98 2f       	mov	r25, r24
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	66 e0       	ldi	r22, 0x06	; 6
    212e:	49 2f       	mov	r20, r25
    2130:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	8d a7       	std	Y+45, r24	; 0x2d
    213e:	9e a7       	std	Y+46, r25	; 0x2e
    2140:	af a7       	std	Y+47, r26	; 0x2f
    2142:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2144:	6d a5       	ldd	r22, Y+45	; 0x2d
    2146:	7e a5       	ldd	r23, Y+46	; 0x2e
    2148:	8f a5       	ldd	r24, Y+47	; 0x2f
    214a:	98 a9       	ldd	r25, Y+48	; 0x30
    214c:	2b ea       	ldi	r18, 0xAB	; 171
    214e:	3a ea       	ldi	r19, 0xAA	; 170
    2150:	4a e2       	ldi	r20, 0x2A	; 42
    2152:	50 e4       	ldi	r21, 0x40	; 64
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	89 a7       	std	Y+41, r24	; 0x29
    215e:	9a a7       	std	Y+42, r25	; 0x2a
    2160:	ab a7       	std	Y+43, r26	; 0x2b
    2162:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2164:	69 a5       	ldd	r22, Y+41	; 0x29
    2166:	7a a5       	ldd	r23, Y+42	; 0x2a
    2168:	8b a5       	ldd	r24, Y+43	; 0x2b
    216a:	9c a5       	ldd	r25, Y+44	; 0x2c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	1c f4       	brge	.+6      	; 0x2182 <LCD_SendCommand+0xc6c>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	88 a7       	std	Y+40, r24	; 0x28
    2180:	91 c0       	rjmp	.+290    	; 0x22a4 <LCD_SendCommand+0xd8e>
	else if (__tmp > 255)
    2182:	69 a5       	ldd	r22, Y+41	; 0x29
    2184:	7a a5       	ldd	r23, Y+42	; 0x2a
    2186:	8b a5       	ldd	r24, Y+43	; 0x2b
    2188:	9c a5       	ldd	r25, Y+44	; 0x2c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	53 e4       	ldi	r21, 0x43	; 67
    2192:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	0c f0       	brlt	.+2      	; 0x219c <LCD_SendCommand+0xc86>
    219a:	7b c0       	rjmp	.+246    	; 0x2292 <LCD_SendCommand+0xd7c>
	{
		_delay_ms(__us / 1000.0);
    219c:	6d a5       	ldd	r22, Y+45	; 0x2d
    219e:	7e a5       	ldd	r23, Y+46	; 0x2e
    21a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a2:	98 a9       	ldd	r25, Y+48	; 0x30
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8c a3       	std	Y+36, r24	; 0x24
    21b6:	9d a3       	std	Y+37, r25	; 0x25
    21b8:	ae a3       	std	Y+38, r26	; 0x26
    21ba:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6c a1       	ldd	r22, Y+36	; 0x24
    21be:	7d a1       	ldd	r23, Y+37	; 0x25
    21c0:	8e a1       	ldd	r24, Y+38	; 0x26
    21c2:	9f a1       	ldd	r25, Y+39	; 0x27
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	88 a3       	std	Y+32, r24	; 0x20
    21d6:	99 a3       	std	Y+33, r25	; 0x21
    21d8:	aa a3       	std	Y+34, r26	; 0x22
    21da:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21dc:	68 a1       	ldd	r22, Y+32	; 0x20
    21de:	79 a1       	ldd	r23, Y+33	; 0x21
    21e0:	8a a1       	ldd	r24, Y+34	; 0x22
    21e2:	9b a1       	ldd	r25, Y+35	; 0x23
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_SendCommand+0xce8>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9f 8f       	std	Y+31, r25	; 0x1f
    21fa:	8e 8f       	std	Y+30, r24	; 0x1e
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_SendCommand+0xd66>
	else if (__tmp > 65535)
    21fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2200:	79 a1       	ldd	r23, Y+33	; 0x21
    2202:	8a a1       	ldd	r24, Y+34	; 0x22
    2204:	9b a1       	ldd	r25, Y+35	; 0x23
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_SendCommand+0xd52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6c a1       	ldd	r22, Y+36	; 0x24
    2218:	7d a1       	ldd	r23, Y+37	; 0x25
    221a:	8e a1       	ldd	r24, Y+38	; 0x26
    221c:	9f a1       	ldd	r25, Y+39	; 0x27
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9f 8f       	std	Y+31, r25	; 0x1f
    223c:	8e 8f       	std	Y+30, r24	; 0x1e
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_SendCommand+0xd48>
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9d 8f       	std	Y+29, r25	; 0x1d
    2246:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2248:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_SendCommand+0xd36>
    2250:	9d 8f       	std	Y+29, r25	; 0x1d
    2252:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2256:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9f 8f       	std	Y+31, r25	; 0x1f
    225c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2260:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_SendCommand+0xd2a>
    2266:	24 c0       	rjmp	.+72     	; 0x22b0 <LCD_SendCommand+0xd9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	68 a1       	ldd	r22, Y+32	; 0x20
    226a:	79 a1       	ldd	r23, Y+33	; 0x21
    226c:	8a a1       	ldd	r24, Y+34	; 0x22
    226e:	9b a1       	ldd	r25, Y+35	; 0x23
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9f 8f       	std	Y+31, r25	; 0x1f
    227a:	8e 8f       	std	Y+30, r24	; 0x1e
    227c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    227e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2280:	9b 8f       	std	Y+27, r25	; 0x1b
    2282:	8a 8f       	std	Y+26, r24	; 0x1a
    2284:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2286:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_SendCommand+0xd72>
    228c:	9b 8f       	std	Y+27, r25	; 0x1b
    228e:	8a 8f       	std	Y+26, r24	; 0x1a
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_SendCommand+0xd9a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2292:	69 a5       	ldd	r22, Y+41	; 0x29
    2294:	7a a5       	ldd	r23, Y+42	; 0x2a
    2296:	8b a5       	ldd	r24, Y+43	; 0x2b
    2298:	9c a5       	ldd	r25, Y+44	; 0x2c
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	88 a7       	std	Y+40, r24	; 0x28
    22a4:	88 a5       	ldd	r24, Y+40	; 0x28
    22a6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a8:	89 8d       	ldd	r24, Y+25	; 0x19
    22aa:	8a 95       	dec	r24
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_SendCommand+0xd94>
    22ae:	89 8f       	std	Y+25, r24	; 0x19
		/* delay */
		_delay_us(1);

#endif
		/* clear enable */
		 GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , LOW );
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	8d 8b       	std	Y+21, r24	; 0x15
    22c4:	9e 8b       	std	Y+22, r25	; 0x16
    22c6:	af 8b       	std	Y+23, r26	; 0x17
    22c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22ca:	6d 89       	ldd	r22, Y+21	; 0x15
    22cc:	7e 89       	ldd	r23, Y+22	; 0x16
    22ce:	8f 89       	ldd	r24, Y+23	; 0x17
    22d0:	98 8d       	ldd	r25, Y+24	; 0x18
    22d2:	2b ea       	ldi	r18, 0xAB	; 171
    22d4:	3a ea       	ldi	r19, 0xAA	; 170
    22d6:	4a e2       	ldi	r20, 0x2A	; 42
    22d8:	50 e4       	ldi	r21, 0x40	; 64
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    22e4:	9a 8b       	std	Y+18, r25	; 0x12
    22e6:	ab 8b       	std	Y+19, r26	; 0x13
    22e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22ea:	69 89       	ldd	r22, Y+17	; 0x11
    22ec:	7a 89       	ldd	r23, Y+18	; 0x12
    22ee:	8b 89       	ldd	r24, Y+19	; 0x13
    22f0:	9c 89       	ldd	r25, Y+20	; 0x14
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	1c f4       	brge	.+6      	; 0x2308 <LCD_SendCommand+0xdf2>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	88 8b       	std	Y+16, r24	; 0x10
    2306:	91 c0       	rjmp	.+290    	; 0x242a <LCD_SendCommand+0xf14>
	else if (__tmp > 255)
    2308:	69 89       	ldd	r22, Y+17	; 0x11
    230a:	7a 89       	ldd	r23, Y+18	; 0x12
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	53 e4       	ldi	r21, 0x43	; 67
    2318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	0c f0       	brlt	.+2      	; 0x2322 <LCD_SendCommand+0xe0c>
    2320:	7b c0       	rjmp	.+246    	; 0x2418 <LCD_SendCommand+0xf02>
	{
		_delay_ms(__us / 1000.0);
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a e7       	ldi	r20, 0x7A	; 122
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8c 87       	std	Y+12, r24	; 0x0c
    233c:	9d 87       	std	Y+13, r25	; 0x0d
    233e:	ae 87       	std	Y+14, r26	; 0x0e
    2340:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	6c 85       	ldd	r22, Y+12	; 0x0c
    2344:	7d 85       	ldd	r23, Y+13	; 0x0d
    2346:	8e 85       	ldd	r24, Y+14	; 0x0e
    2348:	9f 85       	ldd	r25, Y+15	; 0x0f
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a ef       	ldi	r20, 0xFA	; 250
    2350:	54 e4       	ldi	r21, 0x44	; 68
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	88 87       	std	Y+8, r24	; 0x08
    235c:	99 87       	std	Y+9, r25	; 0x09
    235e:	aa 87       	std	Y+10, r26	; 0x0a
    2360:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2362:	68 85       	ldd	r22, Y+8	; 0x08
    2364:	79 85       	ldd	r23, Y+9	; 0x09
    2366:	8a 85       	ldd	r24, Y+10	; 0x0a
    2368:	9b 85       	ldd	r25, Y+11	; 0x0b
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_SendCommand+0xe6e>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9f 83       	std	Y+7, r25	; 0x07
    2380:	8e 83       	std	Y+6, r24	; 0x06
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <LCD_SendCommand+0xeec>
	else if (__tmp > 65535)
    2384:	68 85       	ldd	r22, Y+8	; 0x08
    2386:	79 85       	ldd	r23, Y+9	; 0x09
    2388:	8a 85       	ldd	r24, Y+10	; 0x0a
    238a:	9b 85       	ldd	r25, Y+11	; 0x0b
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	4c f5       	brge	.+82     	; 0x23ee <LCD_SendCommand+0xed8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6c 85       	ldd	r22, Y+12	; 0x0c
    239e:	7d 85       	ldd	r23, Y+13	; 0x0d
    23a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9f 83       	std	Y+7, r25	; 0x07
    23c2:	8e 83       	std	Y+6, r24	; 0x06
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_SendCommand+0xece>
    23c6:	88 ec       	ldi	r24, 0xC8	; 200
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9d 83       	std	Y+5, r25	; 0x05
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_SendCommand+0xebc>
    23d6:	9d 83       	std	Y+5, r25	; 0x05
    23d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9f 83       	std	Y+7, r25	; 0x07
    23e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	8e 81       	ldd	r24, Y+6	; 0x06
    23e6:	9f 81       	ldd	r25, Y+7	; 0x07
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <LCD_SendCommand+0xeb0>
    23ec:	24 c0       	rjmp	.+72     	; 0x2436 <LCD_SendCommand+0xf20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	68 85       	ldd	r22, Y+8	; 0x08
    23f0:	79 85       	ldd	r23, Y+9	; 0x09
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9f 83       	std	Y+7, r25	; 0x07
    2400:	8e 83       	std	Y+6, r24	; 0x06
    2402:	8e 81       	ldd	r24, Y+6	; 0x06
    2404:	9f 81       	ldd	r25, Y+7	; 0x07
    2406:	9b 83       	std	Y+3, r25	; 0x03
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_SendCommand+0xef8>
    2412:	9b 83       	std	Y+3, r25	; 0x03
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_SendCommand+0xf20>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2418:	69 89       	ldd	r22, Y+17	; 0x11
    241a:	7a 89       	ldd	r23, Y+18	; 0x12
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	88 8b       	std	Y+16, r24	; 0x10
    242a:	88 89       	ldd	r24, Y+16	; 0x10
    242c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8a 95       	dec	r24
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_SendCommand+0xf1a>
    2434:	89 83       	std	Y+1, r24	; 0x01

		 /*  delay */
		 _delay_us(1);

}
    2436:	c7 55       	subi	r28, 0x57	; 87
    2438:	df 4f       	sbci	r29, 0xFF	; 255
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <LCD_DisplayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_DisplayCharacter( u8 data )
{
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	c9 5a       	subi	r28, 0xA9	; 169
    245c:	d0 40       	sbci	r29, 0x00	; 0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	fe 01       	movw	r30, r28
    246a:	e7 55       	subi	r30, 0x57	; 87
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 83       	st	Z, r24
	/* - set RS pin */
		GPIO_WritePin( LCD_RS_PORT_ID  , LCD_RS_PIN_ID , HIGH ) ;
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    247a:	fe 01       	movw	r30, r28
    247c:	eb 55       	subi	r30, 0x5B	; 91
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	80 83       	st	Z, r24
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	a2 83       	std	Z+2, r26	; 0x02
    248e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2490:	8e 01       	movw	r16, r28
    2492:	0f 55       	subi	r16, 0x5F	; 95
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	eb 55       	subi	r30, 0x5B	; 91
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	2b ea       	ldi	r18, 0xAB	; 171
    24a6:	3a ea       	ldi	r19, 0xAA	; 170
    24a8:	4a e2       	ldi	r20, 0x2A	; 42
    24aa:	50 e4       	ldi	r21, 0x40	; 64
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 83       	st	Z, r24
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	a2 83       	std	Z+2, r26	; 0x02
    24bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 55       	subi	r30, 0x5F	; 95
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	34 f4       	brge	.+12     	; 0x24e8 <LCD_DisplayCharacter+0x9a>
		__ticks = 1;
    24dc:	fe 01       	movw	r30, r28
    24de:	e0 56       	subi	r30, 0x60	; 96
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 83       	st	Z, r24
    24e6:	e0 c0       	rjmp	.+448    	; 0x26a8 <LCD_DisplayCharacter+0x25a>
	else if (__tmp > 255)
    24e8:	fe 01       	movw	r30, r28
    24ea:	ef 55       	subi	r30, 0x5F	; 95
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	53 e4       	ldi	r21, 0x43	; 67
    24fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	0c f0       	brlt	.+2      	; 0x2508 <LCD_DisplayCharacter+0xba>
    2506:	c0 c0       	rjmp	.+384    	; 0x2688 <LCD_DisplayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2508:	fe 01       	movw	r30, r28
    250a:	eb 55       	subi	r30, 0x5B	; 91
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	fe 01       	movw	r30, r28
    2528:	e4 56       	subi	r30, 0x64	; 100
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 83       	st	Z, r24
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	a2 83       	std	Z+2, r26	; 0x02
    2532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	8e 01       	movw	r16, r28
    2536:	08 56       	subi	r16, 0x68	; 104
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	e4 56       	subi	r30, 0x64	; 100
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	80 83       	st	Z, r24
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	a2 83       	std	Z+2, r26	; 0x02
    2560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2562:	fe 01       	movw	r30, r28
    2564:	e8 56       	subi	r30, 0x68	; 104
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	44 f4       	brge	.+16     	; 0x2590 <LCD_DisplayCharacter+0x142>
		__ticks = 1;
    2580:	fe 01       	movw	r30, r28
    2582:	ea 56       	subi	r30, 0x6A	; 106
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	64 c0       	rjmp	.+200    	; 0x2658 <LCD_DisplayCharacter+0x20a>
	else if (__tmp > 65535)
    2590:	fe 01       	movw	r30, r28
    2592:	e8 56       	subi	r30, 0x68	; 104
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	0c f0       	brlt	.+2      	; 0x25b0 <LCD_DisplayCharacter+0x162>
    25ae:	43 c0       	rjmp	.+134    	; 0x2636 <LCD_DisplayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	fe 01       	movw	r30, r28
    25b2:	e4 56       	subi	r30, 0x64	; 100
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8e 01       	movw	r16, r28
    25d0:	0a 56       	subi	r16, 0x6A	; 106
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <LCD_DisplayCharacter+0x1d8>
    25e8:	fe 01       	movw	r30, r28
    25ea:	ec 56       	subi	r30, 0x6C	; 108
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f6:	fe 01       	movw	r30, r28
    25f8:	ec 56       	subi	r30, 0x6C	; 108
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_DisplayCharacter+0x1b2>
    2604:	fe 01       	movw	r30, r28
    2606:	ec 56       	subi	r30, 0x6C	; 108
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	de 01       	movw	r26, r28
    2610:	aa 56       	subi	r26, 0x6A	; 106
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	ea 56       	subi	r30, 0x6A	; 106
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	9c 93       	st	X, r25
    2624:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	fe 01       	movw	r30, r28
    2628:	ea 56       	subi	r30, 0x6A	; 106
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	d1 f6       	brne	.-76     	; 0x25e8 <LCD_DisplayCharacter+0x19a>
    2634:	4b c0       	rjmp	.+150    	; 0x26cc <LCD_DisplayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	8e 01       	movw	r16, r28
    2638:	0a 56       	subi	r16, 0x6A	; 106
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e8 56       	subi	r30, 0x68	; 104
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	de 01       	movw	r26, r28
    265a:	ae 56       	subi	r26, 0x6E	; 110
    265c:	bf 4f       	sbci	r27, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	ea 56       	subi	r30, 0x6A	; 106
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	9c 93       	st	X, r25
    266c:	8e 93       	st	-X, r24
    266e:	fe 01       	movw	r30, r28
    2670:	ee 56       	subi	r30, 0x6E	; 110
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_DisplayCharacter+0x22a>
    267c:	fe 01       	movw	r30, r28
    267e:	ee 56       	subi	r30, 0x6E	; 110
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	22 c0       	rjmp	.+68     	; 0x26cc <LCD_DisplayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2688:	8e 01       	movw	r16, r28
    268a:	00 56       	subi	r16, 0x60	; 96
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	ef 55       	subi	r30, 0x5F	; 95
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	80 83       	st	Z, r24
    26a8:	de 01       	movw	r26, r28
    26aa:	af 56       	subi	r26, 0x6F	; 111
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e0 56       	subi	r30, 0x60	; 96
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b8:	fe 01       	movw	r30, r28
    26ba:	ef 56       	subi	r30, 0x6F	; 111
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	8a 95       	dec	r24
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_DisplayCharacter+0x272>
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 56       	subi	r30, 0x6F	; 111
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 83       	st	Z, r24

		/* - delay */
		_delay_us(1);

		/* - set enable */
		GPIO_WritePin( LCD_E_PORT_ID , LCD_E_PIN_ID , HIGH );
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    26d6:	fe 01       	movw	r30, r28
    26d8:	e3 57       	subi	r30, 0x73	; 115
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e8       	ldi	r26, 0x80	; 128
    26e2:	bf e3       	ldi	r27, 0x3F	; 63
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26ec:	8e 01       	movw	r16, r28
    26ee:	07 57       	subi	r16, 0x77	; 119
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	fe 01       	movw	r30, r28
    26f4:	e3 57       	subi	r30, 0x73	; 115
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	2b ea       	ldi	r18, 0xAB	; 171
    2702:	3a ea       	ldi	r19, 0xAA	; 170
    2704:	4a e2       	ldi	r20, 0x2A	; 42
    2706:	50 e4       	ldi	r21, 0x40	; 64
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	f8 01       	movw	r30, r16
    2712:	80 83       	st	Z, r24
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	a2 83       	std	Z+2, r26	; 0x02
    2718:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    271a:	fe 01       	movw	r30, r28
    271c:	e7 57       	subi	r30, 0x77	; 119
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	34 f4       	brge	.+12     	; 0x2744 <LCD_DisplayCharacter+0x2f6>
		__ticks = 1;
    2738:	fe 01       	movw	r30, r28
    273a:	e8 57       	subi	r30, 0x78	; 120
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 83       	st	Z, r24
    2742:	e0 c0       	rjmp	.+448    	; 0x2904 <LCD_DisplayCharacter+0x4b6>
	else if (__tmp > 255)
    2744:	fe 01       	movw	r30, r28
    2746:	e7 57       	subi	r30, 0x77	; 119
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	53 e4       	ldi	r21, 0x43	; 67
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	0c f0       	brlt	.+2      	; 0x2764 <LCD_DisplayCharacter+0x316>
    2762:	c0 c0       	rjmp	.+384    	; 0x28e4 <LCD_DisplayCharacter+0x496>
	{
		_delay_ms(__us / 1000.0);
    2764:	fe 01       	movw	r30, r28
    2766:	e3 57       	subi	r30, 0x73	; 115
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	54 e4       	ldi	r21, 0x44	; 68
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	fe 01       	movw	r30, r28
    2784:	ec 57       	subi	r30, 0x7C	; 124
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	8e 01       	movw	r16, r28
    2792:	00 58       	subi	r16, 0x80	; 128
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	ec 57       	subi	r30, 0x7C	; 124
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a ef       	ldi	r20, 0xFA	; 250
    27aa:	54 e4       	ldi	r21, 0x44	; 68
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27be:	fe 01       	movw	r30, r28
    27c0:	e0 58       	subi	r30, 0x80	; 128
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	44 f4       	brge	.+16     	; 0x27ec <LCD_DisplayCharacter+0x39e>
		__ticks = 1;
    27dc:	fe 01       	movw	r30, r28
    27de:	e2 58       	subi	r30, 0x82	; 130
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	64 c0       	rjmp	.+200    	; 0x28b4 <LCD_DisplayCharacter+0x466>
	else if (__tmp > 65535)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e0 58       	subi	r30, 0x80	; 128
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	0c f0       	brlt	.+2      	; 0x280c <LCD_DisplayCharacter+0x3be>
    280a:	43 c0       	rjmp	.+134    	; 0x2892 <LCD_DisplayCharacter+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	fe 01       	movw	r30, r28
    280e:	ec 57       	subi	r30, 0x7C	; 124
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8e 01       	movw	r16, r28
    282c:	02 58       	subi	r16, 0x82	; 130
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
    2842:	1f c0       	rjmp	.+62     	; 0x2882 <LCD_DisplayCharacter+0x434>
    2844:	fe 01       	movw	r30, r28
    2846:	e4 58       	subi	r30, 0x84	; 132
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2852:	fe 01       	movw	r30, r28
    2854:	e4 58       	subi	r30, 0x84	; 132
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_DisplayCharacter+0x40e>
    2860:	fe 01       	movw	r30, r28
    2862:	e4 58       	subi	r30, 0x84	; 132
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	de 01       	movw	r26, r28
    286c:	a2 58       	subi	r26, 0x82	; 130
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e2 58       	subi	r30, 0x82	; 130
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	9c 93       	st	X, r25
    2880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	fe 01       	movw	r30, r28
    2884:	e2 58       	subi	r30, 0x82	; 130
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	d1 f6       	brne	.-76     	; 0x2844 <LCD_DisplayCharacter+0x3f6>
    2890:	4b c0       	rjmp	.+150    	; 0x2928 <LCD_DisplayCharacter+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2892:	8e 01       	movw	r16, r28
    2894:	02 58       	subi	r16, 0x82	; 130
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	e0 58       	subi	r30, 0x80	; 128
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	de 01       	movw	r26, r28
    28b6:	a6 58       	subi	r26, 0x86	; 134
    28b8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	e2 58       	subi	r30, 0x82	; 130
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	9c 93       	st	X, r25
    28c8:	8e 93       	st	-X, r24
    28ca:	fe 01       	movw	r30, r28
    28cc:	e6 58       	subi	r30, 0x86	; 134
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_DisplayCharacter+0x486>
    28d8:	fe 01       	movw	r30, r28
    28da:	e6 58       	subi	r30, 0x86	; 134
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	22 c0       	rjmp	.+68     	; 0x2928 <LCD_DisplayCharacter+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28e4:	8e 01       	movw	r16, r28
    28e6:	08 57       	subi	r16, 0x78	; 120
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	e7 57       	subi	r30, 0x77	; 119
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	f8 01       	movw	r30, r16
    2902:	80 83       	st	Z, r24
    2904:	de 01       	movw	r26, r28
    2906:	a7 58       	subi	r26, 0x87	; 135
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	fe 01       	movw	r30, r28
    290c:	e8 57       	subi	r30, 0x78	; 120
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2914:	fe 01       	movw	r30, r28
    2916:	e7 58       	subi	r30, 0x87	; 135
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	8a 95       	dec	r24
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_DisplayCharacter+0x4ce>
    2920:	fe 01       	movw	r30, r28
    2922:	e7 58       	subi	r30, 0x87	; 135
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 83       	st	Z, r24

	#elif ( LCD_BIT_MODE == 4 )


			/* 5 - send the 4 MSBs of data*/
		    GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN0_ID , GET_BIT(data,4) );
    2928:	fe 01       	movw	r30, r28
    292a:	e7 55       	subi	r30, 0x57	; 87
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	82 95       	swap	r24
    2932:	8f 70       	andi	r24, 0x0F	; 15
    2934:	98 2f       	mov	r25, r24
    2936:	91 70       	andi	r25, 0x01	; 1
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	63 e0       	ldi	r22, 0x03	; 3
    293c:	49 2f       	mov	r20, r25
    293e:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN1_ID , GET_BIT(data,5) );
    2942:	fe 01       	movw	r30, r28
    2944:	e7 55       	subi	r30, 0x57	; 87
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	82 95       	swap	r24
    294c:	86 95       	lsr	r24
    294e:	87 70       	andi	r24, 0x07	; 7
    2950:	98 2f       	mov	r25, r24
    2952:	91 70       	andi	r25, 0x01	; 1
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	64 e0       	ldi	r22, 0x04	; 4
    2958:	49 2f       	mov	r20, r25
    295a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN2_ID , GET_BIT(data,6) );
    295e:	fe 01       	movw	r30, r28
    2960:	e7 55       	subi	r30, 0x57	; 87
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	82 95       	swap	r24
    2968:	86 95       	lsr	r24
    296a:	86 95       	lsr	r24
    296c:	83 70       	andi	r24, 0x03	; 3
    296e:	98 2f       	mov	r25, r24
    2970:	91 70       	andi	r25, 0x01	; 1
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	65 e0       	ldi	r22, 0x05	; 5
    2976:	49 2f       	mov	r20, r25
    2978:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN3_ID , GET_BIT(data,7) );
    297c:	fe 01       	movw	r30, r28
    297e:	e7 55       	subi	r30, 0x57	; 87
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	98 2f       	mov	r25, r24
    2986:	99 1f       	adc	r25, r25
    2988:	99 27       	eor	r25, r25
    298a:	99 1f       	adc	r25, r25
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	66 e0       	ldi	r22, 0x06	; 6
    2990:	49 2f       	mov	r20, r25
    2992:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    2996:	fe 01       	movw	r30, r28
    2998:	eb 58       	subi	r30, 0x8B	; 139
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e8       	ldi	r26, 0x80	; 128
    29a2:	bf e3       	ldi	r27, 0x3F	; 63
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	a2 83       	std	Z+2, r26	; 0x02
    29aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ac:	8e 01       	movw	r16, r28
    29ae:	0f 58       	subi	r16, 0x8F	; 143
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	eb 58       	subi	r30, 0x8B	; 139
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	2b ea       	ldi	r18, 0xAB	; 171
    29c2:	3a ea       	ldi	r19, 0xAA	; 170
    29c4:	4a e2       	ldi	r20, 0x2A	; 42
    29c6:	50 e4       	ldi	r21, 0x40	; 64
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29da:	fe 01       	movw	r30, r28
    29dc:	ef 58       	subi	r30, 0x8F	; 143
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	34 f4       	brge	.+12     	; 0x2a04 <LCD_DisplayCharacter+0x5b6>
		__ticks = 1;
    29f8:	fe 01       	movw	r30, r28
    29fa:	e0 59       	subi	r30, 0x90	; 144
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	80 83       	st	Z, r24
    2a02:	e0 c0       	rjmp	.+448    	; 0x2bc4 <LCD_DisplayCharacter+0x776>
	else if (__tmp > 255)
    2a04:	fe 01       	movw	r30, r28
    2a06:	ef 58       	subi	r30, 0x8F	; 143
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	53 e4       	ldi	r21, 0x43	; 67
    2a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	0c f0       	brlt	.+2      	; 0x2a24 <LCD_DisplayCharacter+0x5d6>
    2a22:	c0 c0       	rjmp	.+384    	; 0x2ba4 <LCD_DisplayCharacter+0x756>
	{
		_delay_ms(__us / 1000.0);
    2a24:	fe 01       	movw	r30, r28
    2a26:	eb 58       	subi	r30, 0x8B	; 139
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	fe 01       	movw	r30, r28
    2a44:	e4 59       	subi	r30, 0x94	; 148
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 83       	st	Z, r24
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	a2 83       	std	Z+2, r26	; 0x02
    2a4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	8e 01       	movw	r16, r28
    2a52:	08 59       	subi	r16, 0x98	; 152
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	fe 01       	movw	r30, r28
    2a58:	e4 59       	subi	r30, 0x94	; 148
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a ef       	ldi	r20, 0xFA	; 250
    2a6a:	54 e4       	ldi	r21, 0x44	; 68
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	80 83       	st	Z, r24
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	a2 83       	std	Z+2, r26	; 0x02
    2a7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e8 59       	subi	r30, 0x98	; 152
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	44 f4       	brge	.+16     	; 0x2aac <LCD_DisplayCharacter+0x65e>
		__ticks = 1;
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ea 59       	subi	r30, 0x9A	; 154
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	64 c0       	rjmp	.+200    	; 0x2b74 <LCD_DisplayCharacter+0x726>
	else if (__tmp > 65535)
    2aac:	fe 01       	movw	r30, r28
    2aae:	e8 59       	subi	r30, 0x98	; 152
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	57 e4       	ldi	r21, 0x47	; 71
    2ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <LCD_DisplayCharacter+0x67e>
    2aca:	43 c0       	rjmp	.+134    	; 0x2b52 <LCD_DisplayCharacter+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	e4 59       	subi	r30, 0x94	; 148
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8e 01       	movw	r16, r28
    2aec:	0a 59       	subi	r16, 0x9A	; 154
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	1f c0       	rjmp	.+62     	; 0x2b42 <LCD_DisplayCharacter+0x6f4>
    2b04:	fe 01       	movw	r30, r28
    2b06:	ec 59       	subi	r30, 0x9C	; 156
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	88 ec       	ldi	r24, 0xC8	; 200
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b12:	fe 01       	movw	r30, r28
    2b14:	ec 59       	subi	r30, 0x9C	; 156
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <LCD_DisplayCharacter+0x6ce>
    2b20:	fe 01       	movw	r30, r28
    2b22:	ec 59       	subi	r30, 0x9C	; 156
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	de 01       	movw	r26, r28
    2b2c:	aa 59       	subi	r26, 0x9A	; 154
    2b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b30:	fe 01       	movw	r30, r28
    2b32:	ea 59       	subi	r30, 0x9A	; 154
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	fe 01       	movw	r30, r28
    2b44:	ea 59       	subi	r30, 0x9A	; 154
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	d1 f6       	brne	.-76     	; 0x2b04 <LCD_DisplayCharacter+0x6b6>
    2b50:	4b c0       	rjmp	.+150    	; 0x2be8 <LCD_DisplayCharacter+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	8e 01       	movw	r16, r28
    2b54:	0a 59       	subi	r16, 0x9A	; 154
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e8 59       	subi	r30, 0x98	; 152
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
    2b74:	de 01       	movw	r26, r28
    2b76:	ae 59       	subi	r26, 0x9E	; 158
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ea 59       	subi	r30, 0x9A	; 154
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ee 59       	subi	r30, 0x9E	; 158
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <LCD_DisplayCharacter+0x746>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ee 59       	subi	r30, 0x9E	; 158
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	22 c0       	rjmp	.+68     	; 0x2be8 <LCD_DisplayCharacter+0x79a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	00 59       	subi	r16, 0x90	; 144
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	ef 58       	subi	r30, 0x8F	; 143
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	80 83       	st	Z, r24
    2bc4:	de 01       	movw	r26, r28
    2bc6:	af 59       	subi	r26, 0x9F	; 159
    2bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e0 59       	subi	r30, 0x90	; 144
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 59       	subi	r30, 0x9F	; 159
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	8a 95       	dec	r24
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <LCD_DisplayCharacter+0x78e>
    2be0:	fe 01       	movw	r30, r28
    2be2:	ef 59       	subi	r30, 0x9F	; 159
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 83       	st	Z, r24

			/* 6 - delay */
			_delay_us(1);

			/* 7 - clear enable */
			GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , LOW );
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e3 5a       	subi	r30, 0xA3	; 163
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e8       	ldi	r26, 0x80	; 128
    2bfe:	bf e3       	ldi	r27, 0x3F	; 63
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	07 5a       	subi	r16, 0xA7	; 167
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e3 5a       	subi	r30, 0xA3	; 163
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	2b ea       	ldi	r18, 0xAB	; 171
    2c1e:	3a ea       	ldi	r19, 0xAA	; 170
    2c20:	4a e2       	ldi	r20, 0x2A	; 42
    2c22:	50 e4       	ldi	r21, 0x40	; 64
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	e7 5a       	subi	r30, 0xA7	; 167
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	34 f4       	brge	.+12     	; 0x2c60 <LCD_DisplayCharacter+0x812>
		__ticks = 1;
    2c54:	fe 01       	movw	r30, r28
    2c56:	e8 5a       	subi	r30, 0xA8	; 168
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	80 83       	st	Z, r24
    2c5e:	e0 c0       	rjmp	.+448    	; 0x2e20 <LCD_DisplayCharacter+0x9d2>
	else if (__tmp > 255)
    2c60:	fe 01       	movw	r30, r28
    2c62:	e7 5a       	subi	r30, 0xA7	; 167
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	53 e4       	ldi	r21, 0x43	; 67
    2c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	0c f0       	brlt	.+2      	; 0x2c80 <LCD_DisplayCharacter+0x832>
    2c7e:	c0 c0       	rjmp	.+384    	; 0x2e00 <LCD_DisplayCharacter+0x9b2>
	{
		_delay_ms(__us / 1000.0);
    2c80:	fe 01       	movw	r30, r28
    2c82:	e3 5a       	subi	r30, 0xA3	; 163
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	54 e4       	ldi	r21, 0x44	; 68
    2c96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ec 5a       	subi	r30, 0xAC	; 172
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	8e 01       	movw	r16, r28
    2cae:	00 5b       	subi	r16, 0xB0	; 176
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	ec 5a       	subi	r30, 0xAC	; 172
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e0 5b       	subi	r30, 0xB0	; 176
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	60 81       	ld	r22, Z
    2ce2:	71 81       	ldd	r23, Z+1	; 0x01
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	44 f4       	brge	.+16     	; 0x2d08 <LCD_DisplayCharacter+0x8ba>
		__ticks = 1;
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e2 5b       	subi	r30, 0xB2	; 178
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	64 c0       	rjmp	.+200    	; 0x2dd0 <LCD_DisplayCharacter+0x982>
	else if (__tmp > 65535)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e0 5b       	subi	r30, 0xB0	; 176
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	0c f0       	brlt	.+2      	; 0x2d28 <LCD_DisplayCharacter+0x8da>
    2d26:	43 c0       	rjmp	.+134    	; 0x2dae <LCD_DisplayCharacter+0x960>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ec 5a       	subi	r30, 0xAC	; 172
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	8e 01       	movw	r16, r28
    2d48:	02 5b       	subi	r16, 0xB2	; 178
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	f8 01       	movw	r30, r16
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
    2d5e:	1f c0       	rjmp	.+62     	; 0x2d9e <LCD_DisplayCharacter+0x950>
    2d60:	fe 01       	movw	r30, r28
    2d62:	e4 5b       	subi	r30, 0xB4	; 180
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e4 5b       	subi	r30, 0xB4	; 180
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <LCD_DisplayCharacter+0x92a>
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e4 5b       	subi	r30, 0xB4	; 180
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	de 01       	movw	r26, r28
    2d88:	a2 5b       	subi	r26, 0xB2	; 178
    2d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e2 5b       	subi	r30, 0xB2	; 178
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	11 96       	adiw	r26, 0x01	; 1
    2d9a:	9c 93       	st	X, r25
    2d9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e2 5b       	subi	r30, 0xB2	; 178
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	d1 f6       	brne	.-76     	; 0x2d60 <LCD_DisplayCharacter+0x912>
    2dac:	4b c0       	rjmp	.+150    	; 0x2e44 <LCD_DisplayCharacter+0x9f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	8e 01       	movw	r16, r28
    2db0:	02 5b       	subi	r16, 0xB2	; 178
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	e0 5b       	subi	r30, 0xB0	; 176
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	de 01       	movw	r26, r28
    2dd2:	a6 5b       	subi	r26, 0xB6	; 182
    2dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e2 5b       	subi	r30, 0xB2	; 178
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
    2de6:	fe 01       	movw	r30, r28
    2de8:	e6 5b       	subi	r30, 0xB6	; 182
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <LCD_DisplayCharacter+0x9a2>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e6 5b       	subi	r30, 0xB6	; 182
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	22 c0       	rjmp	.+68     	; 0x2e44 <LCD_DisplayCharacter+0x9f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e00:	8e 01       	movw	r16, r28
    2e02:	08 5a       	subi	r16, 0xA8	; 168
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	e7 5a       	subi	r30, 0xA7	; 167
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
    2e20:	de 01       	movw	r26, r28
    2e22:	a7 5b       	subi	r26, 0xB7	; 183
    2e24:	bf 4f       	sbci	r27, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e8 5a       	subi	r30, 0xA8	; 168
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e30:	fe 01       	movw	r30, r28
    2e32:	e7 5b       	subi	r30, 0xB7	; 183
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	8a 95       	dec	r24
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCD_DisplayCharacter+0x9ea>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e7 5b       	subi	r30, 0xB7	; 183
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 83       	st	Z, r24

			/* 8 - delay */
			_delay_us(1);

			/* 9 - set enable */
			GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , HIGH );
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	62 e0       	ldi	r22, 0x02	; 2
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	eb 5b       	subi	r30, 0xBB	; 187
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	a0 e8       	ldi	r26, 0x80	; 128
    2e5a:	bf e3       	ldi	r27, 0x3F	; 63
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e64:	8e 01       	movw	r16, r28
    2e66:	0f 5b       	subi	r16, 0xBF	; 191
    2e68:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	eb 5b       	subi	r30, 0xBB	; 187
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	2b ea       	ldi	r18, 0xAB	; 171
    2e7a:	3a ea       	ldi	r19, 0xAA	; 170
    2e7c:	4a e2       	ldi	r20, 0x2A	; 42
    2e7e:	50 e4       	ldi	r21, 0x40	; 64
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	f8 01       	movw	r30, r16
    2e8a:	80 83       	st	Z, r24
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	a2 83       	std	Z+2, r26	; 0x02
    2e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e92:	fe 01       	movw	r30, r28
    2e94:	ef 5b       	subi	r30, 0xBF	; 191
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	34 f4       	brge	.+12     	; 0x2ebc <LCD_DisplayCharacter+0xa6e>
		__ticks = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e0 5c       	subi	r30, 0xC0	; 192
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 83       	st	Z, r24
    2eba:	9d c0       	rjmp	.+314    	; 0x2ff6 <LCD_DisplayCharacter+0xba8>
	else if (__tmp > 255)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ef 5b       	subi	r30, 0xBF	; 191
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	53 e4       	ldi	r21, 0x43	; 67
    2ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <LCD_DisplayCharacter+0xa8e>
    2eda:	7e c0       	rjmp	.+252    	; 0x2fd8 <LCD_DisplayCharacter+0xb8a>
	{
		_delay_ms(__us / 1000.0);
    2edc:	fe 01       	movw	r30, r28
    2ede:	eb 5b       	subi	r30, 0xBB	; 187
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a e7       	ldi	r20, 0x7A	; 122
    2ef0:	54 e4       	ldi	r21, 0x44	; 68
    2ef2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8c af       	std	Y+60, r24	; 0x3c
    2efc:	9d af       	std	Y+61, r25	; 0x3d
    2efe:	ae af       	std	Y+62, r26	; 0x3e
    2f00:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f04:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f06:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f08:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	88 af       	std	Y+56, r24	; 0x38
    2f1c:	99 af       	std	Y+57, r25	; 0x39
    2f1e:	aa af       	std	Y+58, r26	; 0x3a
    2f20:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f22:	68 ad       	ldd	r22, Y+56	; 0x38
    2f24:	79 ad       	ldd	r23, Y+57	; 0x39
    2f26:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f28:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e8       	ldi	r20, 0x80	; 128
    2f30:	5f e3       	ldi	r21, 0x3F	; 63
    2f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f36:	88 23       	and	r24, r24
    2f38:	2c f4       	brge	.+10     	; 0x2f44 <LCD_DisplayCharacter+0xaf6>
		__ticks = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9f ab       	std	Y+55, r25	; 0x37
    2f40:	8e ab       	std	Y+54, r24	; 0x36
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <LCD_DisplayCharacter+0xb74>
	else if (__tmp > 65535)
    2f44:	68 ad       	ldd	r22, Y+56	; 0x38
    2f46:	79 ad       	ldd	r23, Y+57	; 0x39
    2f48:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f4a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	4c f5       	brge	.+82     	; 0x2fae <LCD_DisplayCharacter+0xb60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f60:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f62:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9f ab       	std	Y+55, r25	; 0x37
    2f82:	8e ab       	std	Y+54, r24	; 0x36
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <LCD_DisplayCharacter+0xb56>
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9d ab       	std	Y+53, r25	; 0x35
    2f8c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f8e:	8c a9       	ldd	r24, Y+52	; 0x34
    2f90:	9d a9       	ldd	r25, Y+53	; 0x35
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_DisplayCharacter+0xb44>
    2f96:	9d ab       	std	Y+53, r25	; 0x35
    2f98:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	8e a9       	ldd	r24, Y+54	; 0x36
    2f9c:	9f a9       	ldd	r25, Y+55	; 0x37
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9f ab       	std	Y+55, r25	; 0x37
    2fa2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	8e a9       	ldd	r24, Y+54	; 0x36
    2fa6:	9f a9       	ldd	r25, Y+55	; 0x37
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <LCD_DisplayCharacter+0xb38>
    2fac:	2d c0       	rjmp	.+90     	; 0x3008 <LCD_DisplayCharacter+0xbba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	68 ad       	ldd	r22, Y+56	; 0x38
    2fb0:	79 ad       	ldd	r23, Y+57	; 0x39
    2fb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fb4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9f ab       	std	Y+55, r25	; 0x37
    2fc0:	8e ab       	std	Y+54, r24	; 0x36
    2fc2:	8e a9       	ldd	r24, Y+54	; 0x36
    2fc4:	9f a9       	ldd	r25, Y+55	; 0x37
    2fc6:	9b ab       	std	Y+51, r25	; 0x33
    2fc8:	8a ab       	std	Y+50, r24	; 0x32
    2fca:	8a a9       	ldd	r24, Y+50	; 0x32
    2fcc:	9b a9       	ldd	r25, Y+51	; 0x33
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_DisplayCharacter+0xb80>
    2fd2:	9b ab       	std	Y+51, r25	; 0x33
    2fd4:	8a ab       	std	Y+50, r24	; 0x32
    2fd6:	18 c0       	rjmp	.+48     	; 0x3008 <LCD_DisplayCharacter+0xbba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ef 5b       	subi	r30, 0xBF	; 191
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e0 5c       	subi	r30, 0xC0	; 192
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 83       	st	Z, r24
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e0 5c       	subi	r30, 0xC0	; 192
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3000:	89 a9       	ldd	r24, Y+49	; 0x31
    3002:	8a 95       	dec	r24
    3004:	f1 f7       	brne	.-4      	; 0x3002 <LCD_DisplayCharacter+0xbb4>
    3006:	89 ab       	std	Y+49, r24	; 0x31

			/* 10 - delay */
			_delay_us(1);

			/* 11 - send the 4 LSBs of data*/
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN0_ID , GET_BIT(data,0) );
    3008:	fe 01       	movw	r30, r28
    300a:	e7 55       	subi	r30, 0x57	; 87
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	98 2f       	mov	r25, r24
    3012:	91 70       	andi	r25, 0x01	; 1
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	63 e0       	ldi	r22, 0x03	; 3
    3018:	49 2f       	mov	r20, r25
    301a:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN1_ID , GET_BIT(data,1) );
    301e:	fe 01       	movw	r30, r28
    3020:	e7 55       	subi	r30, 0x57	; 87
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	80 81       	ld	r24, Z
    3026:	86 95       	lsr	r24
    3028:	98 2f       	mov	r25, r24
    302a:	91 70       	andi	r25, 0x01	; 1
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	64 e0       	ldi	r22, 0x04	; 4
    3030:	49 2f       	mov	r20, r25
    3032:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN2_ID , GET_BIT(data,2) );
    3036:	fe 01       	movw	r30, r28
    3038:	e7 55       	subi	r30, 0x57	; 87
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	86 95       	lsr	r24
    3040:	86 95       	lsr	r24
    3042:	98 2f       	mov	r25, r24
    3044:	91 70       	andi	r25, 0x01	; 1
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	65 e0       	ldi	r22, 0x05	; 5
    304a:	49 2f       	mov	r20, r25
    304c:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
			GPIO_WritePin( LCD_DATA_PORT_ID , LCD_DATA_PIN3_ID , GET_BIT(data,3) );
    3050:	fe 01       	movw	r30, r28
    3052:	e7 55       	subi	r30, 0x57	; 87
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	86 95       	lsr	r24
    305a:	86 95       	lsr	r24
    305c:	86 95       	lsr	r24
    305e:	98 2f       	mov	r25, r24
    3060:	91 70       	andi	r25, 0x01	; 1
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	66 e0       	ldi	r22, 0x06	; 6
    3066:	49 2f       	mov	r20, r25
    3068:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e8       	ldi	r26, 0x80	; 128
    3072:	bf e3       	ldi	r27, 0x3F	; 63
    3074:	8d a7       	std	Y+45, r24	; 0x2d
    3076:	9e a7       	std	Y+46, r25	; 0x2e
    3078:	af a7       	std	Y+47, r26	; 0x2f
    307a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    307c:	6d a5       	ldd	r22, Y+45	; 0x2d
    307e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3080:	8f a5       	ldd	r24, Y+47	; 0x2f
    3082:	98 a9       	ldd	r25, Y+48	; 0x30
    3084:	2b ea       	ldi	r18, 0xAB	; 171
    3086:	3a ea       	ldi	r19, 0xAA	; 170
    3088:	4a e2       	ldi	r20, 0x2A	; 42
    308a:	50 e4       	ldi	r21, 0x40	; 64
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	89 a7       	std	Y+41, r24	; 0x29
    3096:	9a a7       	std	Y+42, r25	; 0x2a
    3098:	ab a7       	std	Y+43, r26	; 0x2b
    309a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    309c:	69 a5       	ldd	r22, Y+41	; 0x29
    309e:	7a a5       	ldd	r23, Y+42	; 0x2a
    30a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e8       	ldi	r20, 0x80	; 128
    30aa:	5f e3       	ldi	r21, 0x3F	; 63
    30ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b0:	88 23       	and	r24, r24
    30b2:	1c f4       	brge	.+6      	; 0x30ba <LCD_DisplayCharacter+0xc6c>
		__ticks = 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	88 a7       	std	Y+40, r24	; 0x28
    30b8:	91 c0       	rjmp	.+290    	; 0x31dc <LCD_DisplayCharacter+0xd8e>
	else if (__tmp > 255)
    30ba:	69 a5       	ldd	r22, Y+41	; 0x29
    30bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    30be:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	53 e4       	ldi	r21, 0x43	; 67
    30ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <LCD_DisplayCharacter+0xc86>
    30d2:	7b c0       	rjmp	.+246    	; 0x31ca <LCD_DisplayCharacter+0xd7c>
	{
		_delay_ms(__us / 1000.0);
    30d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    30d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    30d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30da:	98 a9       	ldd	r25, Y+48	; 0x30
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a e7       	ldi	r20, 0x7A	; 122
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	8c a3       	std	Y+36, r24	; 0x24
    30ee:	9d a3       	std	Y+37, r25	; 0x25
    30f0:	ae a3       	std	Y+38, r26	; 0x26
    30f2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	6c a1       	ldd	r22, Y+36	; 0x24
    30f6:	7d a1       	ldd	r23, Y+37	; 0x25
    30f8:	8e a1       	ldd	r24, Y+38	; 0x26
    30fa:	9f a1       	ldd	r25, Y+39	; 0x27
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4a ef       	ldi	r20, 0xFA	; 250
    3102:	54 e4       	ldi	r21, 0x44	; 68
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	88 a3       	std	Y+32, r24	; 0x20
    310e:	99 a3       	std	Y+33, r25	; 0x21
    3110:	aa a3       	std	Y+34, r26	; 0x22
    3112:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3114:	68 a1       	ldd	r22, Y+32	; 0x20
    3116:	79 a1       	ldd	r23, Y+33	; 0x21
    3118:	8a a1       	ldd	r24, Y+34	; 0x22
    311a:	9b a1       	ldd	r25, Y+35	; 0x23
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e8       	ldi	r20, 0x80	; 128
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3128:	88 23       	and	r24, r24
    312a:	2c f4       	brge	.+10     	; 0x3136 <LCD_DisplayCharacter+0xce8>
		__ticks = 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9f 8f       	std	Y+31, r25	; 0x1f
    3132:	8e 8f       	std	Y+30, r24	; 0x1e
    3134:	3f c0       	rjmp	.+126    	; 0x31b4 <LCD_DisplayCharacter+0xd66>
	else if (__tmp > 65535)
    3136:	68 a1       	ldd	r22, Y+32	; 0x20
    3138:	79 a1       	ldd	r23, Y+33	; 0x21
    313a:	8a a1       	ldd	r24, Y+34	; 0x22
    313c:	9b a1       	ldd	r25, Y+35	; 0x23
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	4c f5       	brge	.+82     	; 0x31a0 <LCD_DisplayCharacter+0xd52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314e:	6c a1       	ldd	r22, Y+36	; 0x24
    3150:	7d a1       	ldd	r23, Y+37	; 0x25
    3152:	8e a1       	ldd	r24, Y+38	; 0x26
    3154:	9f a1       	ldd	r25, Y+39	; 0x27
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9f 8f       	std	Y+31, r25	; 0x1f
    3174:	8e 8f       	std	Y+30, r24	; 0x1e
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <LCD_DisplayCharacter+0xd48>
    3178:	88 ec       	ldi	r24, 0xC8	; 200
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9d 8f       	std	Y+29, r25	; 0x1d
    317e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3180:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3182:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <LCD_DisplayCharacter+0xd36>
    3188:	9d 8f       	std	Y+29, r25	; 0x1d
    318a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    318e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	9f 8f       	std	Y+31, r25	; 0x1f
    3194:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3198:	9f 8d       	ldd	r25, Y+31	; 0x1f
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f7       	brne	.-38     	; 0x3178 <LCD_DisplayCharacter+0xd2a>
    319e:	24 c0       	rjmp	.+72     	; 0x31e8 <LCD_DisplayCharacter+0xd9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	68 a1       	ldd	r22, Y+32	; 0x20
    31a2:	79 a1       	ldd	r23, Y+33	; 0x21
    31a4:	8a a1       	ldd	r24, Y+34	; 0x22
    31a6:	9b a1       	ldd	r25, Y+35	; 0x23
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9f 8f       	std	Y+31, r25	; 0x1f
    31b2:	8e 8f       	std	Y+30, r24	; 0x1e
    31b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b8:	9b 8f       	std	Y+27, r25	; 0x1b
    31ba:	8a 8f       	std	Y+26, r24	; 0x1a
    31bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_DisplayCharacter+0xd72>
    31c4:	9b 8f       	std	Y+27, r25	; 0x1b
    31c6:	8a 8f       	std	Y+26, r24	; 0x1a
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <LCD_DisplayCharacter+0xd9a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31ca:	69 a5       	ldd	r22, Y+41	; 0x29
    31cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    31ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	88 a7       	std	Y+40, r24	; 0x28
    31dc:	88 a5       	ldd	r24, Y+40	; 0x28
    31de:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e0:	89 8d       	ldd	r24, Y+25	; 0x19
    31e2:	8a 95       	dec	r24
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_DisplayCharacter+0xd94>
    31e6:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us(1);

	#endif

			/*  clear enable */
			 GPIO_WritePin ( LCD_E_PORT_ID , LCD_E_PIN_ID , LOW );
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 41 07 	call	0xe82	; 0xe82 <GPIO_WritePin>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e8       	ldi	r26, 0x80	; 128
    31f8:	bf e3       	ldi	r27, 0x3F	; 63
    31fa:	8d 8b       	std	Y+21, r24	; 0x15
    31fc:	9e 8b       	std	Y+22, r25	; 0x16
    31fe:	af 8b       	std	Y+23, r26	; 0x17
    3200:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3202:	6d 89       	ldd	r22, Y+21	; 0x15
    3204:	7e 89       	ldd	r23, Y+22	; 0x16
    3206:	8f 89       	ldd	r24, Y+23	; 0x17
    3208:	98 8d       	ldd	r25, Y+24	; 0x18
    320a:	2b ea       	ldi	r18, 0xAB	; 171
    320c:	3a ea       	ldi	r19, 0xAA	; 170
    320e:	4a e2       	ldi	r20, 0x2A	; 42
    3210:	50 e4       	ldi	r21, 0x40	; 64
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	89 8b       	std	Y+17, r24	; 0x11
    321c:	9a 8b       	std	Y+18, r25	; 0x12
    321e:	ab 8b       	std	Y+19, r26	; 0x13
    3220:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3222:	69 89       	ldd	r22, Y+17	; 0x11
    3224:	7a 89       	ldd	r23, Y+18	; 0x12
    3226:	8b 89       	ldd	r24, Y+19	; 0x13
    3228:	9c 89       	ldd	r25, Y+20	; 0x14
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	1c f4       	brge	.+6      	; 0x3240 <LCD_DisplayCharacter+0xdf2>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	88 8b       	std	Y+16, r24	; 0x10
    323e:	91 c0       	rjmp	.+290    	; 0x3362 <LCD_DisplayCharacter+0xf14>
	else if (__tmp > 255)
    3240:	69 89       	ldd	r22, Y+17	; 0x11
    3242:	7a 89       	ldd	r23, Y+18	; 0x12
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	53 e4       	ldi	r21, 0x43	; 67
    3250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	0c f0       	brlt	.+2      	; 0x325a <LCD_DisplayCharacter+0xe0c>
    3258:	7b c0       	rjmp	.+246    	; 0x3350 <LCD_DisplayCharacter+0xf02>
	{
		_delay_ms(__us / 1000.0);
    325a:	6d 89       	ldd	r22, Y+21	; 0x15
    325c:	7e 89       	ldd	r23, Y+22	; 0x16
    325e:	8f 89       	ldd	r24, Y+23	; 0x17
    3260:	98 8d       	ldd	r25, Y+24	; 0x18
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a e7       	ldi	r20, 0x7A	; 122
    3268:	54 e4       	ldi	r21, 0x44	; 68
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8c 87       	std	Y+12, r24	; 0x0c
    3274:	9d 87       	std	Y+13, r25	; 0x0d
    3276:	ae 87       	std	Y+14, r26	; 0x0e
    3278:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6c 85       	ldd	r22, Y+12	; 0x0c
    327c:	7d 85       	ldd	r23, Y+13	; 0x0d
    327e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3280:	9f 85       	ldd	r25, Y+15	; 0x0f
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	88 87       	std	Y+8, r24	; 0x08
    3294:	99 87       	std	Y+9, r25	; 0x09
    3296:	aa 87       	std	Y+10, r26	; 0x0a
    3298:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    329a:	68 85       	ldd	r22, Y+8	; 0x08
    329c:	79 85       	ldd	r23, Y+9	; 0x09
    329e:	8a 85       	ldd	r24, Y+10	; 0x0a
    32a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <LCD_DisplayCharacter+0xe6e>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9f 83       	std	Y+7, r25	; 0x07
    32b8:	8e 83       	std	Y+6, r24	; 0x06
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <LCD_DisplayCharacter+0xeec>
	else if (__tmp > 65535)
    32bc:	68 85       	ldd	r22, Y+8	; 0x08
    32be:	79 85       	ldd	r23, Y+9	; 0x09
    32c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <LCD_DisplayCharacter+0xed8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    32d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    32d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    32da:	9f 85       	ldd	r25, Y+15	; 0x0f
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9f 83       	std	Y+7, r25	; 0x07
    32fa:	8e 83       	std	Y+6, r24	; 0x06
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <LCD_DisplayCharacter+0xece>
    32fe:	88 ec       	ldi	r24, 0xC8	; 200
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9d 83       	std	Y+5, r25	; 0x05
    3304:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3306:	8c 81       	ldd	r24, Y+4	; 0x04
    3308:	9d 81       	ldd	r25, Y+5	; 0x05
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <LCD_DisplayCharacter+0xebc>
    330e:	9d 83       	std	Y+5, r25	; 0x05
    3310:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8e 81       	ldd	r24, Y+6	; 0x06
    3314:	9f 81       	ldd	r25, Y+7	; 0x07
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9f 83       	std	Y+7, r25	; 0x07
    331a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8e 81       	ldd	r24, Y+6	; 0x06
    331e:	9f 81       	ldd	r25, Y+7	; 0x07
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <LCD_DisplayCharacter+0xeb0>
    3324:	24 c0       	rjmp	.+72     	; 0x336e <LCD_DisplayCharacter+0xf20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	68 85       	ldd	r22, Y+8	; 0x08
    3328:	79 85       	ldd	r23, Y+9	; 0x09
    332a:	8a 85       	ldd	r24, Y+10	; 0x0a
    332c:	9b 85       	ldd	r25, Y+11	; 0x0b
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9f 83       	std	Y+7, r25	; 0x07
    3338:	8e 83       	std	Y+6, r24	; 0x06
    333a:	8e 81       	ldd	r24, Y+6	; 0x06
    333c:	9f 81       	ldd	r25, Y+7	; 0x07
    333e:	9b 83       	std	Y+3, r25	; 0x03
    3340:	8a 83       	std	Y+2, r24	; 0x02
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	9b 81       	ldd	r25, Y+3	; 0x03
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <LCD_DisplayCharacter+0xef8>
    334a:	9b 83       	std	Y+3, r25	; 0x03
    334c:	8a 83       	std	Y+2, r24	; 0x02
    334e:	0f c0       	rjmp	.+30     	; 0x336e <LCD_DisplayCharacter+0xf20>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3350:	69 89       	ldd	r22, Y+17	; 0x11
    3352:	7a 89       	ldd	r23, Y+18	; 0x12
    3354:	8b 89       	ldd	r24, Y+19	; 0x13
    3356:	9c 89       	ldd	r25, Y+20	; 0x14
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	88 8b       	std	Y+16, r24	; 0x10
    3362:	88 89       	ldd	r24, Y+16	; 0x10
    3364:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	8a 95       	dec	r24
    336a:	f1 f7       	brne	.-4      	; 0x3368 <LCD_DisplayCharacter+0xf1a>
    336c:	89 83       	std	Y+1, r24	; 0x01

			 /*  delay */
			 _delay_us(1);


}
    336e:	c7 55       	subi	r28, 0x57	; 87
    3370:	df 4f       	sbci	r29, 0xFF	; 255
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	08 95       	ret

00003386 <LCD_DisplayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_DisplayString( const char *str )
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <LCD_DisplayString+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	9b 83       	std	Y+3, r25	; 0x03
    3394:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;
	for( i=0 ; str[i]!='\0' ; i++ )
    3396:	19 82       	std	Y+1, r1	; 0x01
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <LCD_DisplayString+0x30>
		LCD_DisplayCharacter( str[i] );
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	fc 01       	movw	r30, r24
    33a6:	e2 0f       	add	r30, r18
    33a8:	f3 1f       	adc	r31, r19
    33aa:	80 81       	ld	r24, Z
    33ac:	0e 94 27 12 	call	0x244e	; 0x244e <LCD_DisplayCharacter>
 * Display the required string on the screen
 */
void LCD_DisplayString( const char *str )
{
	u8 i ;
	for( i=0 ; str[i]!='\0' ; i++ )
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	8f 5f       	subi	r24, 0xFF	; 255
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	fc 01       	movw	r30, r24
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	80 81       	ld	r24, Z
    33c8:	88 23       	and	r24, r24
    33ca:	39 f7       	brne	.-50     	; 0x339a <LCD_DisplayString+0x14>
		LCD_DisplayCharacter( str[i] );
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <LCD_IntegerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_IntegerToString( int data )
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	62 97       	sbiw	r28, 0x12	; 18
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	9a 8b       	std	Y+18, r25	; 0x12
    33ee:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    33f0:	89 89       	ldd	r24, Y+17	; 0x11
    33f2:	9a 89       	ldd	r25, Y+18	; 0x12
    33f4:	9e 01       	movw	r18, r28
    33f6:	2f 5f       	subi	r18, 0xFF	; 255
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	b9 01       	movw	r22, r18
    33fc:	4a e0       	ldi	r20, 0x0A	; 10
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	0e 94 44 21 	call	0x4288	; 0x4288 <itoa>

   LCD_DisplayString(arr);
    3404:	ce 01       	movw	r24, r28
    3406:	01 96       	adiw	r24, 0x01	; 1
    3408:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
}
    340c:	62 96       	adiw	r28, 0x12	; 18
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <LCD_MoveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_MoveCursor( u8 row , u8 column )
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <LCD_MoveCursor+0x6>
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	6a 83       	std	Y+2, r22	; 0x02
	if( row == 0 )
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	88 23       	and	r24, r24
    3430:	29 f4       	brne	.+10     	; 0x343c <LCD_MoveCursor+0x1e>
	{
		LCD_SendCommand( LCD_SET_CURSOR_LOCATION_FIRST_LINE | column ) ;
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	80 68       	ori	r24, 0x80	; 128
    3436:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>
    343a:	07 c0       	rjmp	.+14     	; 0x344a <LCD_MoveCursor+0x2c>
	}
	else if ( row == 1 )
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	21 f4       	brne	.+8      	; 0x344a <LCD_MoveCursor+0x2c>
	{
		LCD_SendCommand( LCD_SET_CURSOR_LOCATION_SECOND_LINE | column ) ;
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	80 6c       	ori	r24, 0xC0	; 192
    3446:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>
	}
}
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <LCD_DisplayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_DisplayStringRowColumn( u8 row , u8 col , const char *Str )
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	00 d0       	rcall	.+0      	; 0x345a <LCD_DisplayStringRowColumn+0x6>
    345a:	00 d0       	rcall	.+0      	; 0x345c <LCD_DisplayStringRowColumn+0x8>
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	6a 83       	std	Y+2, r22	; 0x02
    3464:	5c 83       	std	Y+4, r21	; 0x04
    3466:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_MoveCursor( row , col );
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	6a 81       	ldd	r22, Y+2	; 0x02
    346c:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>

	/* Display the string*/
	LCD_DisplayString ( Str );
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <LCD_ClearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_ClearScreen( )
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand( LCD_CLEAR_SCREEN );
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_SendCommand>
}
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <APP_Init>:
/*
 * Description :
 * set up Application
 */
void APP_Init()
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    34a2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_Init>
}
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <APP_FirstDisplayScreen>:
/*
 * Description :
 * display when screen turns on
 */
void APP_FirstDisplayScreen()
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	2e 97       	sbiw	r28, 0x0e	; 14
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearScreen();
    34c0:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
	LCD_DisplayStringRowColumn( 0 , 3 , "Electronic" ) ;
    34c4:	20 e6       	ldi	r18, 0x60	; 96
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	63 e0       	ldi	r22, 0x03	; 3
    34cc:	a9 01       	movw	r20, r18
    34ce:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
	LCD_DisplayStringRowColumn( 1 , 1 , "Voting Machine" ) ;
    34d2:	2b e6       	ldi	r18, 0x6B	; 107
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	a9 01       	movw	r20, r18
    34dc:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	aa e7       	ldi	r26, 0x7A	; 122
    34e6:	b4 e4       	ldi	r27, 0x44	; 68
    34e8:	8b 87       	std	Y+11, r24	; 0x0b
    34ea:	9c 87       	std	Y+12, r25	; 0x0c
    34ec:	ad 87       	std	Y+13, r26	; 0x0d
    34ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	4a ef       	ldi	r20, 0xFA	; 250
    34fe:	54 e4       	ldi	r21, 0x44	; 68
    3500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	8f 83       	std	Y+7, r24	; 0x07
    350a:	98 87       	std	Y+8, r25	; 0x08
    350c:	a9 87       	std	Y+9, r26	; 0x09
    350e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	2c f4       	brge	.+10     	; 0x3532 <APP_FirstDisplayScreen+0x86>
		__ticks = 1;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	3f c0       	rjmp	.+126    	; 0x35b0 <APP_FirstDisplayScreen+0x104>
	else if (__tmp > 65535)
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	4c f5       	brge	.+82     	; 0x359c <APP_FirstDisplayScreen+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	6b 85       	ldd	r22, Y+11	; 0x0b
    354c:	7c 85       	ldd	r23, Y+12	; 0x0c
    354e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3550:	9e 85       	ldd	r25, Y+14	; 0x0e
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e2       	ldi	r20, 0x20	; 32
    3558:	51 e4       	ldi	r21, 0x41	; 65
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9e 83       	std	Y+6, r25	; 0x06
    3570:	8d 83       	std	Y+5, r24	; 0x05
    3572:	0f c0       	rjmp	.+30     	; 0x3592 <APP_FirstDisplayScreen+0xe6>
    3574:	88 ec       	ldi	r24, 0xC8	; 200
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c 83       	std	Y+4, r25	; 0x04
    357a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <APP_FirstDisplayScreen+0xd4>
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	69 f7       	brne	.-38     	; 0x3574 <APP_FirstDisplayScreen+0xc8>
    359a:	14 c0       	rjmp	.+40     	; 0x35c4 <APP_FirstDisplayScreen+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9e 83       	std	Y+6, r25	; 0x06
    35ae:	8d 83       	std	Y+5, r24	; 0x05
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	9a 81       	ldd	r25, Y+2	; 0x02
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <APP_FirstDisplayScreen+0x110>
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	APP_MainMenuScrean();
    35c4:	0e 94 ed 1a 	call	0x35da	; 0x35da <APP_MainMenuScrean>
}
    35c8:	2e 96       	adiw	r28, 0x0e	; 14
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <APP_MainMenuScrean>:
/*
 * Description :
 * display Candidates by number of votes as default
 */
void APP_MainMenuScrean()
{
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
		LCD_ClearScreen();
    35e2:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>


	    LCD_DisplayStringRowColumn( 0 , 1 , "A" ) ;
    35e6:	2a e7       	ldi	r18, 0x7A	; 122
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	61 e0       	ldi	r22, 0x01	; 1
    35ee:	a9 01       	movw	r20, r18
    35f0:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
		LCD_MoveCursor(1,1);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote1);
    35fc:	80 91 f0 00 	lds	r24, 0x00F0
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>

		LCD_DisplayStringRowColumn( 0 , 5 , "B" ) ;
    3608:	2c e7       	ldi	r18, 0x7C	; 124
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	65 e0       	ldi	r22, 0x05	; 5
    3610:	a9 01       	movw	r20, r18
    3612:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
		LCD_MoveCursor(1,5);
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	65 e0       	ldi	r22, 0x05	; 5
    361a:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote2);
    361e:	80 91 f1 00 	lds	r24, 0x00F1
    3622:	88 2f       	mov	r24, r24
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>

		LCD_DisplayStringRowColumn( 0 , 9 , "C" ) ;
    362a:	2e e7       	ldi	r18, 0x7E	; 126
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	69 e0       	ldi	r22, 0x09	; 9
    3632:	a9 01       	movw	r20, r18
    3634:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
		LCD_MoveCursor(1,9);
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	69 e0       	ldi	r22, 0x09	; 9
    363c:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote3);
    3640:	80 91 f2 00 	lds	r24, 0x00F2
    3644:	88 2f       	mov	r24, r24
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>

		LCD_DisplayStringRowColumn( 0 , 13 , "D" ) ;
    364c:	20 e8       	ldi	r18, 0x80	; 128
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	6d e0       	ldi	r22, 0x0D	; 13
    3654:	a9 01       	movw	r20, r18
    3656:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
		LCD_MoveCursor(1,13);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	6d e0       	ldi	r22, 0x0D	; 13
    365e:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote4);
    3662:	80 91 f3 00 	lds	r24, 0x00F3
    3666:	88 2f       	mov	r24, r24
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>

		DisplayVote() ;
    366e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <DisplayVote>
}
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	08 95       	ret

00003678 <DisplayVote>:
/*
 * Description :
 * display Candidates by number of votes when user enter vote
 */
void DisplayVote()
{
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	c5 57       	subi	r28, 0x75	; 117
    3686:	d0 40       	sbci	r29, 0x00	; 0
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
	u32 vote = vote1 + vote2 + vote3 + vote4 ;
    3692:	80 91 f0 00 	lds	r24, 0x00F0
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	80 91 f1 00 	lds	r24, 0x00F1
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	28 0f       	add	r18, r24
    36a4:	39 1f       	adc	r19, r25
    36a6:	80 91 f2 00 	lds	r24, 0x00F2
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	28 0f       	add	r18, r24
    36b0:	39 1f       	adc	r19, r25
    36b2:	80 91 f3 00 	lds	r24, 0x00F3
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	82 0f       	add	r24, r18
    36bc:	93 1f       	adc	r25, r19
    36be:	fe 01       	movw	r30, r28
    36c0:	ee 58       	subi	r30, 0x8E	; 142
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	aa 27       	eor	r26, r26
    36c6:	97 fd       	sbrc	r25, 7
    36c8:	a0 95       	com	r26
    36ca:	ba 2f       	mov	r27, r26
    36cc:	80 83       	st	Z, r24
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	a2 83       	std	Z+2, r26	; 0x02
    36d2:	b3 83       	std	Z+3, r27	; 0x03
	u8 PressKey = KEYPAD_GetPressedKey( ) ;
    36d4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <KEYPAD_GetPressedKey>
    36d8:	fe 01       	movw	r30, r28
    36da:	ef 58       	subi	r30, 0x8F	; 143
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 83       	st	Z, r24

	if ( PressKey == 1 )
    36e0:	fe 01       	movw	r30, r28
    36e2:	ef 58       	subi	r30, 0x8F	; 143
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	81 30       	cpi	r24, 0x01	; 1
    36ea:	09 f0       	breq	.+2      	; 0x36ee <DisplayVote+0x76>
    36ec:	c3 c0       	rjmp	.+390    	; 0x3874 <DisplayVote+0x1fc>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e3 59       	subi	r30, 0x93	; 147
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	a6 e9       	ldi	r26, 0x96	; 150
    36fa:	b3 e4       	ldi	r27, 0x43	; 67
    36fc:	80 83       	st	Z, r24
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	a2 83       	std	Z+2, r26	; 0x02
    3702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3704:	8e 01       	movw	r16, r28
    3706:	07 59       	subi	r16, 0x97	; 151
    3708:	1f 4f       	sbci	r17, 0xFF	; 255
    370a:	fe 01       	movw	r30, r28
    370c:	e3 59       	subi	r30, 0x93	; 147
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	4a ef       	ldi	r20, 0xFA	; 250
    371e:	54 e4       	ldi	r21, 0x44	; 68
    3720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	f8 01       	movw	r30, r16
    372a:	80 83       	st	Z, r24
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	a2 83       	std	Z+2, r26	; 0x02
    3730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3732:	fe 01       	movw	r30, r28
    3734:	e7 59       	subi	r30, 0x97	; 151
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e8       	ldi	r20, 0x80	; 128
    3746:	5f e3       	ldi	r21, 0x3F	; 63
    3748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    374c:	88 23       	and	r24, r24
    374e:	44 f4       	brge	.+16     	; 0x3760 <DisplayVote+0xe8>
		__ticks = 1;
    3750:	fe 01       	movw	r30, r28
    3752:	e9 59       	subi	r30, 0x99	; 153
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	80 83       	st	Z, r24
    375e:	64 c0       	rjmp	.+200    	; 0x3828 <DisplayVote+0x1b0>
	else if (__tmp > 65535)
    3760:	fe 01       	movw	r30, r28
    3762:	e7 59       	subi	r30, 0x97	; 151
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	60 81       	ld	r22, Z
    3768:	71 81       	ldd	r23, Z+1	; 0x01
    376a:	82 81       	ldd	r24, Z+2	; 0x02
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	57 e4       	ldi	r21, 0x47	; 71
    3776:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    377a:	18 16       	cp	r1, r24
    377c:	0c f0       	brlt	.+2      	; 0x3780 <DisplayVote+0x108>
    377e:	43 c0       	rjmp	.+134    	; 0x3806 <DisplayVote+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3780:	fe 01       	movw	r30, r28
    3782:	e3 59       	subi	r30, 0x93	; 147
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	8e 01       	movw	r16, r28
    37a0:	09 59       	subi	r16, 0x99	; 153
    37a2:	1f 4f       	sbci	r17, 0xFF	; 255
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24
    37b6:	1f c0       	rjmp	.+62     	; 0x37f6 <DisplayVote+0x17e>
    37b8:	fe 01       	movw	r30, r28
    37ba:	eb 59       	subi	r30, 0x9B	; 155
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	88 ec       	ldi	r24, 0xC8	; 200
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	80 83       	st	Z, r24
    37c6:	fe 01       	movw	r30, r28
    37c8:	eb 59       	subi	r30, 0x9B	; 155
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	91 81       	ldd	r25, Z+1	; 0x01
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	f1 f7       	brne	.-4      	; 0x37d0 <DisplayVote+0x158>
    37d4:	fe 01       	movw	r30, r28
    37d6:	eb 59       	subi	r30, 0x9B	; 155
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37de:	de 01       	movw	r26, r28
    37e0:	a9 59       	subi	r26, 0x99	; 153
    37e2:	bf 4f       	sbci	r27, 0xFF	; 255
    37e4:	fe 01       	movw	r30, r28
    37e6:	e9 59       	subi	r30, 0x99	; 153
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	11 96       	adiw	r26, 0x01	; 1
    37f2:	9c 93       	st	X, r25
    37f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	fe 01       	movw	r30, r28
    37f8:	e9 59       	subi	r30, 0x99	; 153
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	91 81       	ldd	r25, Z+1	; 0x01
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	d1 f6       	brne	.-76     	; 0x37b8 <DisplayVote+0x140>
    3804:	27 c0       	rjmp	.+78     	; 0x3854 <DisplayVote+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3806:	8e 01       	movw	r16, r28
    3808:	09 59       	subi	r16, 0x99	; 153
    380a:	1f 4f       	sbci	r17, 0xFF	; 255
    380c:	fe 01       	movw	r30, r28
    380e:	e7 59       	subi	r30, 0x97	; 151
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	f8 01       	movw	r30, r16
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
    3828:	de 01       	movw	r26, r28
    382a:	ad 59       	subi	r26, 0x9D	; 157
    382c:	bf 4f       	sbci	r27, 0xFF	; 255
    382e:	fe 01       	movw	r30, r28
    3830:	e9 59       	subi	r30, 0x99	; 153
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	8d 93       	st	X+, r24
    383a:	9c 93       	st	X, r25
    383c:	fe 01       	movw	r30, r28
    383e:	ed 59       	subi	r30, 0x9D	; 157
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <DisplayVote+0x1ce>
    384a:	fe 01       	movw	r30, r28
    384c:	ed 59       	subi	r30, 0x9D	; 157
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	80 83       	st	Z, r24
	{
		_delay_ms(300);
		vote1++;
    3854:	80 91 f0 00 	lds	r24, 0x00F0
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	80 93 f0 00 	sts	0x00F0, r24
		LCD_MoveCursor(1,1);
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote1);
    3866:	80 91 f0 00 	lds	r24, 0x00F0
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>
    3872:	ad c4       	rjmp	.+2394   	; 0x41ce <DisplayVote+0xb56>

	}

	else if ( PressKey == 2 )
    3874:	fe 01       	movw	r30, r28
    3876:	ef 58       	subi	r30, 0x8F	; 143
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 81       	ld	r24, Z
    387c:	82 30       	cpi	r24, 0x02	; 2
    387e:	09 f0       	breq	.+2      	; 0x3882 <DisplayVote+0x20a>
    3880:	c3 c0       	rjmp	.+390    	; 0x3a08 <DisplayVote+0x390>
    3882:	fe 01       	movw	r30, r28
    3884:	e1 5a       	subi	r30, 0xA1	; 161
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a6 e9       	ldi	r26, 0x96	; 150
    388e:	b3 e4       	ldi	r27, 0x43	; 67
    3890:	80 83       	st	Z, r24
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	a2 83       	std	Z+2, r26	; 0x02
    3896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3898:	8e 01       	movw	r16, r28
    389a:	05 5a       	subi	r16, 0xA5	; 165
    389c:	1f 4f       	sbci	r17, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e1 5a       	subi	r30, 0xA1	; 161
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a ef       	ldi	r20, 0xFA	; 250
    38b2:	54 e4       	ldi	r21, 0x44	; 68
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	f8 01       	movw	r30, r16
    38be:	80 83       	st	Z, r24
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	a2 83       	std	Z+2, r26	; 0x02
    38c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c6:	fe 01       	movw	r30, r28
    38c8:	e5 5a       	subi	r30, 0xA5	; 165
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	44 f4       	brge	.+16     	; 0x38f4 <DisplayVote+0x27c>
		__ticks = 1;
    38e4:	fe 01       	movw	r30, r28
    38e6:	e7 5a       	subi	r30, 0xA7	; 167
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
    38f2:	64 c0       	rjmp	.+200    	; 0x39bc <DisplayVote+0x344>
	else if (__tmp > 65535)
    38f4:	fe 01       	movw	r30, r28
    38f6:	e5 5a       	subi	r30, 0xA5	; 165
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	60 81       	ld	r22, Z
    38fc:	71 81       	ldd	r23, Z+1	; 0x01
    38fe:	82 81       	ldd	r24, Z+2	; 0x02
    3900:	93 81       	ldd	r25, Z+3	; 0x03
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	4f e7       	ldi	r20, 0x7F	; 127
    3908:	57 e4       	ldi	r21, 0x47	; 71
    390a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    390e:	18 16       	cp	r1, r24
    3910:	0c f0       	brlt	.+2      	; 0x3914 <DisplayVote+0x29c>
    3912:	43 c0       	rjmp	.+134    	; 0x399a <DisplayVote+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3914:	fe 01       	movw	r30, r28
    3916:	e1 5a       	subi	r30, 0xA1	; 161
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e2       	ldi	r20, 0x20	; 32
    3928:	51 e4       	ldi	r21, 0x41	; 65
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8e 01       	movw	r16, r28
    3934:	07 5a       	subi	r16, 0xA7	; 167
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	f8 01       	movw	r30, r16
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	80 83       	st	Z, r24
    394a:	1f c0       	rjmp	.+62     	; 0x398a <DisplayVote+0x312>
    394c:	fe 01       	movw	r30, r28
    394e:	e9 5a       	subi	r30, 0xA9	; 169
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	88 ec       	ldi	r24, 0xC8	; 200
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	fe 01       	movw	r30, r28
    395c:	e9 5a       	subi	r30, 0xA9	; 169
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 81       	ld	r24, Z
    3962:	91 81       	ldd	r25, Z+1	; 0x01
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <DisplayVote+0x2ec>
    3968:	fe 01       	movw	r30, r28
    396a:	e9 5a       	subi	r30, 0xA9	; 169
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	de 01       	movw	r26, r28
    3974:	a7 5a       	subi	r26, 0xA7	; 167
    3976:	bf 4f       	sbci	r27, 0xFF	; 255
    3978:	fe 01       	movw	r30, r28
    397a:	e7 5a       	subi	r30, 0xA7	; 167
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	11 96       	adiw	r26, 0x01	; 1
    3986:	9c 93       	st	X, r25
    3988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398a:	fe 01       	movw	r30, r28
    398c:	e7 5a       	subi	r30, 0xA7	; 167
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	80 81       	ld	r24, Z
    3992:	91 81       	ldd	r25, Z+1	; 0x01
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	d1 f6       	brne	.-76     	; 0x394c <DisplayVote+0x2d4>
    3998:	27 c0       	rjmp	.+78     	; 0x39e8 <DisplayVote+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399a:	8e 01       	movw	r16, r28
    399c:	07 5a       	subi	r16, 0xA7	; 167
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	e5 5a       	subi	r30, 0xA5	; 165
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	f8 01       	movw	r30, r16
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	de 01       	movw	r26, r28
    39be:	ab 5a       	subi	r26, 0xAB	; 171
    39c0:	bf 4f       	sbci	r27, 0xFF	; 255
    39c2:	fe 01       	movw	r30, r28
    39c4:	e7 5a       	subi	r30, 0xA7	; 167
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	8d 93       	st	X+, r24
    39ce:	9c 93       	st	X, r25
    39d0:	fe 01       	movw	r30, r28
    39d2:	eb 5a       	subi	r30, 0xAB	; 171
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <DisplayVote+0x362>
    39de:	fe 01       	movw	r30, r28
    39e0:	eb 5a       	subi	r30, 0xAB	; 171
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	80 83       	st	Z, r24
	{
		_delay_ms(300);
		vote2++;
    39e8:	80 91 f1 00 	lds	r24, 0x00F1
    39ec:	8f 5f       	subi	r24, 0xFF	; 255
    39ee:	80 93 f1 00 	sts	0x00F1, r24
		LCD_MoveCursor(1,5);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	65 e0       	ldi	r22, 0x05	; 5
    39f6:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote2);
    39fa:	80 91 f1 00 	lds	r24, 0x00F1
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>
    3a06:	e3 c3       	rjmp	.+1990   	; 0x41ce <DisplayVote+0xb56>
	}
	else if ( PressKey == 3 )
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ef 58       	subi	r30, 0x8F	; 143
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 81       	ld	r24, Z
    3a10:	83 30       	cpi	r24, 0x03	; 3
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <DisplayVote+0x39e>
    3a14:	c3 c0       	rjmp	.+390    	; 0x3b9c <DisplayVote+0x524>
    3a16:	fe 01       	movw	r30, r28
    3a18:	ef 5a       	subi	r30, 0xAF	; 175
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a6 e9       	ldi	r26, 0x96	; 150
    3a22:	b3 e4       	ldi	r27, 0x43	; 67
    3a24:	80 83       	st	Z, r24
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	a2 83       	std	Z+2, r26	; 0x02
    3a2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2c:	8e 01       	movw	r16, r28
    3a2e:	03 5b       	subi	r16, 0xB3	; 179
    3a30:	1f 4f       	sbci	r17, 0xFF	; 255
    3a32:	fe 01       	movw	r30, r28
    3a34:	ef 5a       	subi	r30, 0xAF	; 175
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	60 81       	ld	r22, Z
    3a3a:	71 81       	ldd	r23, Z+1	; 0x01
    3a3c:	82 81       	ldd	r24, Z+2	; 0x02
    3a3e:	93 81       	ldd	r25, Z+3	; 0x03
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4a ef       	ldi	r20, 0xFA	; 250
    3a46:	54 e4       	ldi	r21, 0x44	; 68
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	f8 01       	movw	r30, r16
    3a52:	80 83       	st	Z, r24
    3a54:	91 83       	std	Z+1, r25	; 0x01
    3a56:	a2 83       	std	Z+2, r26	; 0x02
    3a58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e3 5b       	subi	r30, 0xB3	; 179
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e8       	ldi	r20, 0x80	; 128
    3a6e:	5f e3       	ldi	r21, 0x3F	; 63
    3a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a74:	88 23       	and	r24, r24
    3a76:	44 f4       	brge	.+16     	; 0x3a88 <DisplayVote+0x410>
		__ticks = 1;
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e5 5b       	subi	r30, 0xB5	; 181
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
    3a86:	64 c0       	rjmp	.+200    	; 0x3b50 <DisplayVote+0x4d8>
	else if (__tmp > 65535)
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e3 5b       	subi	r30, 0xB3	; 179
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	60 81       	ld	r22, Z
    3a90:	71 81       	ldd	r23, Z+1	; 0x01
    3a92:	82 81       	ldd	r24, Z+2	; 0x02
    3a94:	93 81       	ldd	r25, Z+3	; 0x03
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	3f ef       	ldi	r19, 0xFF	; 255
    3a9a:	4f e7       	ldi	r20, 0x7F	; 127
    3a9c:	57 e4       	ldi	r21, 0x47	; 71
    3a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa2:	18 16       	cp	r1, r24
    3aa4:	0c f0       	brlt	.+2      	; 0x3aa8 <DisplayVote+0x430>
    3aa6:	43 c0       	rjmp	.+134    	; 0x3b2e <DisplayVote+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ef 5a       	subi	r30, 0xAF	; 175
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e2       	ldi	r20, 0x20	; 32
    3abc:	51 e4       	ldi	r21, 0x41	; 65
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	05 5b       	subi	r16, 0xB5	; 181
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	bc 01       	movw	r22, r24
    3ace:	cd 01       	movw	r24, r26
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	f8 01       	movw	r30, r16
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	1f c0       	rjmp	.+62     	; 0x3b1e <DisplayVote+0x4a6>
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e7 5b       	subi	r30, 0xB7	; 183
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	88 ec       	ldi	r24, 0xC8	; 200
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24
    3aee:	fe 01       	movw	r30, r28
    3af0:	e7 5b       	subi	r30, 0xB7	; 183
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	80 81       	ld	r24, Z
    3af6:	91 81       	ldd	r25, Z+1	; 0x01
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <DisplayVote+0x480>
    3afc:	fe 01       	movw	r30, r28
    3afe:	e7 5b       	subi	r30, 0xB7	; 183
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	91 83       	std	Z+1, r25	; 0x01
    3b04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b06:	de 01       	movw	r26, r28
    3b08:	a5 5b       	subi	r26, 0xB5	; 181
    3b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e5 5b       	subi	r30, 0xB5	; 181
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	11 96       	adiw	r26, 0x01	; 1
    3b1a:	9c 93       	st	X, r25
    3b1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e5 5b       	subi	r30, 0xB5	; 181
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	d1 f6       	brne	.-76     	; 0x3ae0 <DisplayVote+0x468>
    3b2c:	27 c0       	rjmp	.+78     	; 0x3b7c <DisplayVote+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2e:	8e 01       	movw	r16, r28
    3b30:	05 5b       	subi	r16, 0xB5	; 181
    3b32:	1f 4f       	sbci	r17, 0xFF	; 255
    3b34:	fe 01       	movw	r30, r28
    3b36:	e3 5b       	subi	r30, 0xB3	; 179
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	60 81       	ld	r22, Z
    3b3c:	71 81       	ldd	r23, Z+1	; 0x01
    3b3e:	82 81       	ldd	r24, Z+2	; 0x02
    3b40:	93 81       	ldd	r25, Z+3	; 0x03
    3b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
    3b50:	de 01       	movw	r26, r28
    3b52:	a9 5b       	subi	r26, 0xB9	; 185
    3b54:	bf 4f       	sbci	r27, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	e5 5b       	subi	r30, 0xB5	; 181
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	8d 93       	st	X+, r24
    3b62:	9c 93       	st	X, r25
    3b64:	fe 01       	movw	r30, r28
    3b66:	e9 5b       	subi	r30, 0xB9	; 185
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <DisplayVote+0x4f6>
    3b72:	fe 01       	movw	r30, r28
    3b74:	e9 5b       	subi	r30, 0xB9	; 185
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	80 83       	st	Z, r24
	{
		_delay_ms(300);
		vote3++;
    3b7c:	80 91 f2 00 	lds	r24, 0x00F2
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	80 93 f2 00 	sts	0x00F2, r24
		LCD_MoveCursor(1,9);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	69 e0       	ldi	r22, 0x09	; 9
    3b8a:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote3);
    3b8e:	80 91 f2 00 	lds	r24, 0x00F2
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>
    3b9a:	19 c3       	rjmp	.+1586   	; 0x41ce <DisplayVote+0xb56>
	}
	else if ( PressKey == 4 )
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ef 58       	subi	r30, 0x8F	; 143
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	84 30       	cpi	r24, 0x04	; 4
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <DisplayVote+0x532>
    3ba8:	95 c0       	rjmp	.+298    	; 0x3cd4 <DisplayVote+0x65c>
    3baa:	fe 01       	movw	r30, r28
    3bac:	ed 5b       	subi	r30, 0xBD	; 189
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	a6 e9       	ldi	r26, 0x96	; 150
    3bb6:	b3 e4       	ldi	r27, 0x43	; 67
    3bb8:	80 83       	st	Z, r24
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	a2 83       	std	Z+2, r26	; 0x02
    3bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	8e 01       	movw	r16, r28
    3bc2:	01 5c       	subi	r16, 0xC1	; 193
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 5b       	subi	r30, 0xBD	; 189
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	60 81       	ld	r22, Z
    3bce:	71 81       	ldd	r23, Z+1	; 0x01
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	4a ef       	ldi	r20, 0xFA	; 250
    3bda:	54 e4       	ldi	r21, 0x44	; 68
    3bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	80 83       	st	Z, r24
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	a2 83       	std	Z+2, r26	; 0x02
    3bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bee:	fe 01       	movw	r30, r28
    3bf0:	ff 96       	adiw	r30, 0x3f	; 63
    3bf2:	60 81       	ld	r22, Z
    3bf4:	71 81       	ldd	r23, Z+1	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e8       	ldi	r20, 0x80	; 128
    3c00:	5f e3       	ldi	r21, 0x3F	; 63
    3c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c06:	88 23       	and	r24, r24
    3c08:	2c f4       	brge	.+10     	; 0x3c14 <DisplayVote+0x59c>
		__ticks = 1;
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	9e af       	std	Y+62, r25	; 0x3e
    3c10:	8d af       	std	Y+61, r24	; 0x3d
    3c12:	46 c0       	rjmp	.+140    	; 0x3ca0 <DisplayVote+0x628>
	else if (__tmp > 65535)
    3c14:	fe 01       	movw	r30, r28
    3c16:	ff 96       	adiw	r30, 0x3f	; 63
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	4f e7       	ldi	r20, 0x7F	; 127
    3c26:	57 e4       	ldi	r21, 0x47	; 71
    3c28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c2c:	18 16       	cp	r1, r24
    3c2e:	64 f5       	brge	.+88     	; 0x3c88 <DisplayVote+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c30:	fe 01       	movw	r30, r28
    3c32:	ed 5b       	subi	r30, 0xBD	; 189
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e2       	ldi	r20, 0x20	; 32
    3c44:	51 e4       	ldi	r21, 0x41	; 65
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e af       	std	Y+62, r25	; 0x3e
    3c5c:	8d af       	std	Y+61, r24	; 0x3d
    3c5e:	0f c0       	rjmp	.+30     	; 0x3c7e <DisplayVote+0x606>
    3c60:	88 ec       	ldi	r24, 0xC8	; 200
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	9c af       	std	Y+60, r25	; 0x3c
    3c66:	8b af       	std	Y+59, r24	; 0x3b
    3c68:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <DisplayVote+0x5f4>
    3c70:	9c af       	std	Y+60, r25	; 0x3c
    3c72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	9e af       	std	Y+62, r25	; 0x3e
    3c7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c80:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	69 f7       	brne	.-38     	; 0x3c60 <DisplayVote+0x5e8>
    3c86:	16 c0       	rjmp	.+44     	; 0x3cb4 <DisplayVote+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ff 96       	adiw	r30, 0x3f	; 63
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	9e af       	std	Y+62, r25	; 0x3e
    3c9e:	8d af       	std	Y+61, r24	; 0x3d
    3ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ca4:	9a af       	std	Y+58, r25	; 0x3a
    3ca6:	89 af       	std	Y+57, r24	; 0x39
    3ca8:	89 ad       	ldd	r24, Y+57	; 0x39
    3caa:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <DisplayVote+0x634>
    3cb0:	9a af       	std	Y+58, r25	; 0x3a
    3cb2:	89 af       	std	Y+57, r24	; 0x39
	{
		_delay_ms(300);
		vote4++;
    3cb4:	80 91 f3 00 	lds	r24, 0x00F3
    3cb8:	8f 5f       	subi	r24, 0xFF	; 255
    3cba:	80 93 f3 00 	sts	0x00F3, r24
		LCD_MoveCursor(1,13);
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	6d e0       	ldi	r22, 0x0D	; 13
    3cc2:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_MoveCursor>
		LCD_IntegerToString(vote4);
    3cc6:	80 91 f3 00 	lds	r24, 0x00F3
    3cca:	88 2f       	mov	r24, r24
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <LCD_IntegerToString>
    3cd2:	7d c2       	rjmp	.+1274   	; 0x41ce <DisplayVote+0xb56>
	}
	else if( PressKey == 5 )
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	ef 58       	subi	r30, 0x8F	; 143
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	85 30       	cpi	r24, 0x05	; 5
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <DisplayVote+0x66a>
    3ce0:	70 c1       	rjmp	.+736    	; 0x3fc2 <DisplayVote+0x94a>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	a6 e9       	ldi	r26, 0x96	; 150
    3ce8:	b3 e4       	ldi	r27, 0x43	; 67
    3cea:	8d ab       	std	Y+53, r24	; 0x35
    3cec:	9e ab       	std	Y+54, r25	; 0x36
    3cee:	af ab       	std	Y+55, r26	; 0x37
    3cf0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf2:	6d a9       	ldd	r22, Y+53	; 0x35
    3cf4:	7e a9       	ldd	r23, Y+54	; 0x36
    3cf6:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4a ef       	ldi	r20, 0xFA	; 250
    3d00:	54 e4       	ldi	r21, 0x44	; 68
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	89 ab       	std	Y+49, r24	; 0x31
    3d0c:	9a ab       	std	Y+50, r25	; 0x32
    3d0e:	ab ab       	std	Y+51, r26	; 0x33
    3d10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d12:	69 a9       	ldd	r22, Y+49	; 0x31
    3d14:	7a a9       	ldd	r23, Y+50	; 0x32
    3d16:	8b a9       	ldd	r24, Y+51	; 0x33
    3d18:	9c a9       	ldd	r25, Y+52	; 0x34
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e8       	ldi	r20, 0x80	; 128
    3d20:	5f e3       	ldi	r21, 0x3F	; 63
    3d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d26:	88 23       	and	r24, r24
    3d28:	2c f4       	brge	.+10     	; 0x3d34 <DisplayVote+0x6bc>
		__ticks = 1;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	98 ab       	std	Y+48, r25	; 0x30
    3d30:	8f a7       	std	Y+47, r24	; 0x2f
    3d32:	3f c0       	rjmp	.+126    	; 0x3db2 <DisplayVote+0x73a>
	else if (__tmp > 65535)
    3d34:	69 a9       	ldd	r22, Y+49	; 0x31
    3d36:	7a a9       	ldd	r23, Y+50	; 0x32
    3d38:	8b a9       	ldd	r24, Y+51	; 0x33
    3d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	4f e7       	ldi	r20, 0x7F	; 127
    3d42:	57 e4       	ldi	r21, 0x47	; 71
    3d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d48:	18 16       	cp	r1, r24
    3d4a:	4c f5       	brge	.+82     	; 0x3d9e <DisplayVote+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d4e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d50:	8f a9       	ldd	r24, Y+55	; 0x37
    3d52:	98 ad       	ldd	r25, Y+56	; 0x38
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e2       	ldi	r20, 0x20	; 32
    3d5a:	51 e4       	ldi	r21, 0x41	; 65
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	98 ab       	std	Y+48, r25	; 0x30
    3d72:	8f a7       	std	Y+47, r24	; 0x2f
    3d74:	0f c0       	rjmp	.+30     	; 0x3d94 <DisplayVote+0x71c>
    3d76:	88 ec       	ldi	r24, 0xC8	; 200
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9e a7       	std	Y+46, r25	; 0x2e
    3d7c:	8d a7       	std	Y+45, r24	; 0x2d
    3d7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d80:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <DisplayVote+0x70a>
    3d86:	9e a7       	std	Y+46, r25	; 0x2e
    3d88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	98 ab       	std	Y+48, r25	; 0x30
    3d92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d96:	98 a9       	ldd	r25, Y+48	; 0x30
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	69 f7       	brne	.-38     	; 0x3d76 <DisplayVote+0x6fe>
    3d9c:	14 c0       	rjmp	.+40     	; 0x3dc6 <DisplayVote+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3da0:	7a a9       	ldd	r23, Y+50	; 0x32
    3da2:	8b a9       	ldd	r24, Y+51	; 0x33
    3da4:	9c a9       	ldd	r25, Y+52	; 0x34
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	98 ab       	std	Y+48, r25	; 0x30
    3db0:	8f a7       	std	Y+47, r24	; 0x2f
    3db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3db4:	98 a9       	ldd	r25, Y+48	; 0x30
    3db6:	9c a7       	std	Y+44, r25	; 0x2c
    3db8:	8b a7       	std	Y+43, r24	; 0x2b
    3dba:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <DisplayVote+0x746>
    3dc2:	9c a7       	std	Y+44, r25	; 0x2c
    3dc4:	8b a7       	std	Y+43, r24	; 0x2b
	{
		_delay_ms(300);
		if(vote)
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	ee 58       	subi	r30, 0x8E	; 142
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	80 81       	ld	r24, Z
    3dce:	91 81       	ldd	r25, Z+1	; 0x01
    3dd0:	a2 81       	ldd	r26, Z+2	; 0x02
    3dd2:	b3 81       	ldd	r27, Z+3	; 0x03
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	a1 05       	cpc	r26, r1
    3dd8:	b1 05       	cpc	r27, r1
    3dda:	09 f4       	brne	.+2      	; 0x3dde <DisplayVote+0x766>
    3ddc:	eb c0       	rjmp	.+470    	; 0x3fb4 <DisplayVote+0x93c>
		{
			if( vote1>vote2 && vote1>vote3 && vote1>vote4 )
    3dde:	90 91 f0 00 	lds	r25, 0x00F0
    3de2:	80 91 f1 00 	lds	r24, 0x00F1
    3de6:	89 17       	cp	r24, r25
    3de8:	98 f4       	brcc	.+38     	; 0x3e10 <DisplayVote+0x798>
    3dea:	90 91 f0 00 	lds	r25, 0x00F0
    3dee:	80 91 f2 00 	lds	r24, 0x00F2
    3df2:	89 17       	cp	r24, r25
    3df4:	68 f4       	brcc	.+26     	; 0x3e10 <DisplayVote+0x798>
    3df6:	90 91 f0 00 	lds	r25, 0x00F0
    3dfa:	80 91 f3 00 	lds	r24, 0x00F3
    3dfe:	89 17       	cp	r24, r25
    3e00:	38 f4       	brcc	.+14     	; 0x3e10 <DisplayVote+0x798>
			{

				LCD_ClearScreen();
    3e02:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
				LCD_DisplayString("A is winner");
    3e06:	82 e8       	ldi	r24, 0x82	; 130
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
    3e0e:	df c1       	rjmp	.+958    	; 0x41ce <DisplayVote+0xb56>

			}
			else if ( vote2>vote1 && vote2>vote3 && vote2>vote4 )
    3e10:	90 91 f1 00 	lds	r25, 0x00F1
    3e14:	80 91 f0 00 	lds	r24, 0x00F0
    3e18:	89 17       	cp	r24, r25
    3e1a:	98 f4       	brcc	.+38     	; 0x3e42 <DisplayVote+0x7ca>
    3e1c:	90 91 f1 00 	lds	r25, 0x00F1
    3e20:	80 91 f2 00 	lds	r24, 0x00F2
    3e24:	89 17       	cp	r24, r25
    3e26:	68 f4       	brcc	.+26     	; 0x3e42 <DisplayVote+0x7ca>
    3e28:	90 91 f1 00 	lds	r25, 0x00F1
    3e2c:	80 91 f3 00 	lds	r24, 0x00F3
    3e30:	89 17       	cp	r24, r25
    3e32:	38 f4       	brcc	.+14     	; 0x3e42 <DisplayVote+0x7ca>
			{

				LCD_ClearScreen();
    3e34:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
				LCD_DisplayString("B is winner");
    3e38:	8e e8       	ldi	r24, 0x8E	; 142
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
    3e40:	c6 c1       	rjmp	.+908    	; 0x41ce <DisplayVote+0xb56>

			}
			else if ( vote3>vote1 && vote3>vote2 && vote3>vote4 )
    3e42:	90 91 f2 00 	lds	r25, 0x00F2
    3e46:	80 91 f0 00 	lds	r24, 0x00F0
    3e4a:	89 17       	cp	r24, r25
    3e4c:	98 f4       	brcc	.+38     	; 0x3e74 <DisplayVote+0x7fc>
    3e4e:	90 91 f2 00 	lds	r25, 0x00F2
    3e52:	80 91 f1 00 	lds	r24, 0x00F1
    3e56:	89 17       	cp	r24, r25
    3e58:	68 f4       	brcc	.+26     	; 0x3e74 <DisplayVote+0x7fc>
    3e5a:	90 91 f2 00 	lds	r25, 0x00F2
    3e5e:	80 91 f3 00 	lds	r24, 0x00F3
    3e62:	89 17       	cp	r24, r25
    3e64:	38 f4       	brcc	.+14     	; 0x3e74 <DisplayVote+0x7fc>
			{

				LCD_ClearScreen();
    3e66:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
				LCD_DisplayString("C is winner");
    3e6a:	8a e9       	ldi	r24, 0x9A	; 154
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
    3e72:	ad c1       	rjmp	.+858    	; 0x41ce <DisplayVote+0xb56>

			}
			else if ( vote4>vote1 && vote4>vote2 && vote4>vote3)
    3e74:	90 91 f3 00 	lds	r25, 0x00F3
    3e78:	80 91 f0 00 	lds	r24, 0x00F0
    3e7c:	89 17       	cp	r24, r25
    3e7e:	98 f4       	brcc	.+38     	; 0x3ea6 <DisplayVote+0x82e>
    3e80:	90 91 f3 00 	lds	r25, 0x00F3
    3e84:	80 91 f1 00 	lds	r24, 0x00F1
    3e88:	89 17       	cp	r24, r25
    3e8a:	68 f4       	brcc	.+26     	; 0x3ea6 <DisplayVote+0x82e>
    3e8c:	90 91 f3 00 	lds	r25, 0x00F3
    3e90:	80 91 f2 00 	lds	r24, 0x00F2
    3e94:	89 17       	cp	r24, r25
    3e96:	38 f4       	brcc	.+14     	; 0x3ea6 <DisplayVote+0x82e>
			{

				LCD_ClearScreen();
    3e98:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
				LCD_DisplayString("D is winner");
    3e9c:	86 ea       	ldi	r24, 0xA6	; 166
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
    3ea4:	94 c1       	rjmp	.+808    	; 0x41ce <DisplayVote+0xb56>

			}
			else
			{

				LCD_ClearScreen();
    3ea6:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
				LCD_DisplayStringRowColumn( 0 , 1 , "NO Result" ) ;
    3eaa:	22 eb       	ldi	r18, 0xB2	; 178
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	a9 01       	movw	r20, r18
    3eb4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
				LCD_DisplayStringRowColumn( 1 , 1 , "RE-VOTE" ) ;
    3eb8:	2c eb       	ldi	r18, 0xBC	; 188
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	61 e0       	ldi	r22, 0x01	; 1
    3ec0:	a9 01       	movw	r20, r18
    3ec2:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	aa e7       	ldi	r26, 0x7A	; 122
    3ecc:	b4 e4       	ldi	r27, 0x44	; 68
    3ece:	8f a3       	std	Y+39, r24	; 0x27
    3ed0:	98 a7       	std	Y+40, r25	; 0x28
    3ed2:	a9 a7       	std	Y+41, r26	; 0x29
    3ed4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    3eda:	89 a5       	ldd	r24, Y+41	; 0x29
    3edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	4a ef       	ldi	r20, 0xFA	; 250
    3ee4:	54 e4       	ldi	r21, 0x44	; 68
    3ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	8b a3       	std	Y+35, r24	; 0x23
    3ef0:	9c a3       	std	Y+36, r25	; 0x24
    3ef2:	ad a3       	std	Y+37, r26	; 0x25
    3ef4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    3efa:	8d a1       	ldd	r24, Y+37	; 0x25
    3efc:	9e a1       	ldd	r25, Y+38	; 0x26
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e8       	ldi	r20, 0x80	; 128
    3f04:	5f e3       	ldi	r21, 0x3F	; 63
    3f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f0a:	88 23       	and	r24, r24
    3f0c:	2c f4       	brge	.+10     	; 0x3f18 <DisplayVote+0x8a0>
		__ticks = 1;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	9a a3       	std	Y+34, r25	; 0x22
    3f14:	89 a3       	std	Y+33, r24	; 0x21
    3f16:	3f c0       	rjmp	.+126    	; 0x3f96 <DisplayVote+0x91e>
	else if (__tmp > 65535)
    3f18:	6b a1       	ldd	r22, Y+35	; 0x23
    3f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	3f ef       	ldi	r19, 0xFF	; 255
    3f24:	4f e7       	ldi	r20, 0x7F	; 127
    3f26:	57 e4       	ldi	r21, 0x47	; 71
    3f28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f2c:	18 16       	cp	r1, r24
    3f2e:	4c f5       	brge	.+82     	; 0x3f82 <DisplayVote+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f30:	6f a1       	ldd	r22, Y+39	; 0x27
    3f32:	78 a5       	ldd	r23, Y+40	; 0x28
    3f34:	89 a5       	ldd	r24, Y+41	; 0x29
    3f36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e2       	ldi	r20, 0x20	; 32
    3f3e:	51 e4       	ldi	r21, 0x41	; 65
    3f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	bc 01       	movw	r22, r24
    3f4a:	cd 01       	movw	r24, r26
    3f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	9a a3       	std	Y+34, r25	; 0x22
    3f56:	89 a3       	std	Y+33, r24	; 0x21
    3f58:	0f c0       	rjmp	.+30     	; 0x3f78 <DisplayVote+0x900>
    3f5a:	88 ec       	ldi	r24, 0xC8	; 200
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	98 a3       	std	Y+32, r25	; 0x20
    3f60:	8f 8f       	std	Y+31, r24	; 0x1f
    3f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f64:	98 a1       	ldd	r25, Y+32	; 0x20
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	f1 f7       	brne	.-4      	; 0x3f66 <DisplayVote+0x8ee>
    3f6a:	98 a3       	std	Y+32, r25	; 0x20
    3f6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f70:	9a a1       	ldd	r25, Y+34	; 0x22
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	9a a3       	std	Y+34, r25	; 0x22
    3f76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f78:	89 a1       	ldd	r24, Y+33	; 0x21
    3f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	69 f7       	brne	.-38     	; 0x3f5a <DisplayVote+0x8e2>
    3f80:	14 c0       	rjmp	.+40     	; 0x3faa <DisplayVote+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f82:	6b a1       	ldd	r22, Y+35	; 0x23
    3f84:	7c a1       	ldd	r23, Y+36	; 0x24
    3f86:	8d a1       	ldd	r24, Y+37	; 0x25
    3f88:	9e a1       	ldd	r25, Y+38	; 0x26
    3f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	9a a3       	std	Y+34, r25	; 0x22
    3f94:	89 a3       	std	Y+33, r24	; 0x21
    3f96:	89 a1       	ldd	r24, Y+33	; 0x21
    3f98:	9a a1       	ldd	r25, Y+34	; 0x22
    3f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    3f9c:	8d 8f       	std	Y+29, r24	; 0x1d
    3f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <DisplayVote+0x92a>
    3fa6:	9e 8f       	std	Y+30, r25	; 0x1e
    3fa8:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				APP_Reset ();
    3faa:	0e 94 f5 20 	call	0x41ea	; 0x41ea <APP_Reset>
				APP_MainMenuScrean();
    3fae:	0e 94 ed 1a 	call	0x35da	; 0x35da <APP_MainMenuScrean>
    3fb2:	0d c1       	rjmp	.+538    	; 0x41ce <DisplayVote+0xb56>

			}
		}
		else
		{
			LCD_ClearScreen();
    3fb4:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
			LCD_DisplayString("NO Voting");
    3fb8:	84 ec       	ldi	r24, 0xC4	; 196
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_DisplayString>
    3fc0:	06 c1       	rjmp	.+524    	; 0x41ce <DisplayVote+0xb56>
		}

	}

	else if ( PressKey == 6 )
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ef 58       	subi	r30, 0x8F	; 143
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	80 81       	ld	r24, Z
    3fca:	86 30       	cpi	r24, 0x06	; 6
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <DisplayVote+0x958>
    3fce:	80 c0       	rjmp	.+256    	; 0x40d0 <DisplayVote+0xa58>
	{


		    LCD_ClearScreen();
    3fd0:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
		    APP_Reset ();
    3fd4:	0e 94 f5 20 	call	0x41ea	; 0x41ea <APP_Reset>
		    LCD_DisplayStringRowColumn( 0 , 1 , " System Reset" ) ;
    3fd8:	2e ec       	ldi	r18, 0xCE	; 206
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	a9 01       	movw	r20, r18
    3fe2:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	aa e7       	ldi	r26, 0x7A	; 122
    3fec:	b4 e4       	ldi	r27, 0x44	; 68
    3fee:	89 8f       	std	Y+25, r24	; 0x19
    3ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    3ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4a ef       	ldi	r20, 0xFA	; 250
    4004:	54 e4       	ldi	r21, 0x44	; 68
    4006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	8d 8b       	std	Y+21, r24	; 0x15
    4010:	9e 8b       	std	Y+22, r25	; 0x16
    4012:	af 8b       	std	Y+23, r26	; 0x17
    4014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4016:	6d 89       	ldd	r22, Y+21	; 0x15
    4018:	7e 89       	ldd	r23, Y+22	; 0x16
    401a:	8f 89       	ldd	r24, Y+23	; 0x17
    401c:	98 8d       	ldd	r25, Y+24	; 0x18
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	40 e8       	ldi	r20, 0x80	; 128
    4024:	5f e3       	ldi	r21, 0x3F	; 63
    4026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402a:	88 23       	and	r24, r24
    402c:	2c f4       	brge	.+10     	; 0x4038 <DisplayVote+0x9c0>
		__ticks = 1;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	9c 8b       	std	Y+20, r25	; 0x14
    4034:	8b 8b       	std	Y+19, r24	; 0x13
    4036:	3f c0       	rjmp	.+126    	; 0x40b6 <DisplayVote+0xa3e>
	else if (__tmp > 65535)
    4038:	6d 89       	ldd	r22, Y+21	; 0x15
    403a:	7e 89       	ldd	r23, Y+22	; 0x16
    403c:	8f 89       	ldd	r24, Y+23	; 0x17
    403e:	98 8d       	ldd	r25, Y+24	; 0x18
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	3f ef       	ldi	r19, 0xFF	; 255
    4044:	4f e7       	ldi	r20, 0x7F	; 127
    4046:	57 e4       	ldi	r21, 0x47	; 71
    4048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404c:	18 16       	cp	r1, r24
    404e:	4c f5       	brge	.+82     	; 0x40a2 <DisplayVote+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4050:	69 8d       	ldd	r22, Y+25	; 0x19
    4052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e2       	ldi	r20, 0x20	; 32
    405e:	51 e4       	ldi	r21, 0x41	; 65
    4060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	bc 01       	movw	r22, r24
    406a:	cd 01       	movw	r24, r26
    406c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	9c 8b       	std	Y+20, r25	; 0x14
    4076:	8b 8b       	std	Y+19, r24	; 0x13
    4078:	0f c0       	rjmp	.+30     	; 0x4098 <DisplayVote+0xa20>
    407a:	88 ec       	ldi	r24, 0xC8	; 200
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	9a 8b       	std	Y+18, r25	; 0x12
    4080:	89 8b       	std	Y+17, r24	; 0x11
    4082:	89 89       	ldd	r24, Y+17	; 0x11
    4084:	9a 89       	ldd	r25, Y+18	; 0x12
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <DisplayVote+0xa0e>
    408a:	9a 8b       	std	Y+18, r25	; 0x12
    408c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408e:	8b 89       	ldd	r24, Y+19	; 0x13
    4090:	9c 89       	ldd	r25, Y+20	; 0x14
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	9c 8b       	std	Y+20, r25	; 0x14
    4096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4098:	8b 89       	ldd	r24, Y+19	; 0x13
    409a:	9c 89       	ldd	r25, Y+20	; 0x14
    409c:	00 97       	sbiw	r24, 0x00	; 0
    409e:	69 f7       	brne	.-38     	; 0x407a <DisplayVote+0xa02>
    40a0:	14 c0       	rjmp	.+40     	; 0x40ca <DisplayVote+0xa52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a2:	6d 89       	ldd	r22, Y+21	; 0x15
    40a4:	7e 89       	ldd	r23, Y+22	; 0x16
    40a6:	8f 89       	ldd	r24, Y+23	; 0x17
    40a8:	98 8d       	ldd	r25, Y+24	; 0x18
    40aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	9c 8b       	std	Y+20, r25	; 0x14
    40b4:	8b 8b       	std	Y+19, r24	; 0x13
    40b6:	8b 89       	ldd	r24, Y+19	; 0x13
    40b8:	9c 89       	ldd	r25, Y+20	; 0x14
    40ba:	98 8b       	std	Y+16, r25	; 0x10
    40bc:	8f 87       	std	Y+15, r24	; 0x0f
    40be:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c0:	98 89       	ldd	r25, Y+16	; 0x10
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <DisplayVote+0xa4a>
    40c6:	98 8b       	std	Y+16, r25	; 0x10
    40c8:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(1000);
		    APP_FirstDisplayScreen();
    40ca:	0e 94 56 1a 	call	0x34ac	; 0x34ac <APP_FirstDisplayScreen>
    40ce:	7f c0       	rjmp	.+254    	; 0x41ce <DisplayVote+0xb56>
	}
	else
	{
		 LCD_ClearScreen();
    40d0:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_ClearScreen>
		 LCD_DisplayStringRowColumn( 0 , 2 , "Wrong Input" ) ;
    40d4:	2c ed       	ldi	r18, 0xDC	; 220
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	62 e0       	ldi	r22, 0x02	; 2
    40dc:	a9 01       	movw	r20, r18
    40de:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_DisplayStringRowColumn>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	aa e7       	ldi	r26, 0x7A	; 122
    40e8:	b4 e4       	ldi	r27, 0x44	; 68
    40ea:	8b 87       	std	Y+11, r24	; 0x0b
    40ec:	9c 87       	std	Y+12, r25	; 0x0c
    40ee:	ad 87       	std	Y+13, r26	; 0x0d
    40f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	4a ef       	ldi	r20, 0xFA	; 250
    4100:	54 e4       	ldi	r21, 0x44	; 68
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	8f 83       	std	Y+7, r24	; 0x07
    410c:	98 87       	std	Y+8, r25	; 0x08
    410e:	a9 87       	std	Y+9, r26	; 0x09
    4110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4112:	6f 81       	ldd	r22, Y+7	; 0x07
    4114:	78 85       	ldd	r23, Y+8	; 0x08
    4116:	89 85       	ldd	r24, Y+9	; 0x09
    4118:	9a 85       	ldd	r25, Y+10	; 0x0a
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e8       	ldi	r20, 0x80	; 128
    4120:	5f e3       	ldi	r21, 0x3F	; 63
    4122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4126:	88 23       	and	r24, r24
    4128:	2c f4       	brge	.+10     	; 0x4134 <DisplayVote+0xabc>
		__ticks = 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	9e 83       	std	Y+6, r25	; 0x06
    4130:	8d 83       	std	Y+5, r24	; 0x05
    4132:	3f c0       	rjmp	.+126    	; 0x41b2 <DisplayVote+0xb3a>
	else if (__tmp > 65535)
    4134:	6f 81       	ldd	r22, Y+7	; 0x07
    4136:	78 85       	ldd	r23, Y+8	; 0x08
    4138:	89 85       	ldd	r24, Y+9	; 0x09
    413a:	9a 85       	ldd	r25, Y+10	; 0x0a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	4f e7       	ldi	r20, 0x7F	; 127
    4142:	57 e4       	ldi	r21, 0x47	; 71
    4144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4148:	18 16       	cp	r1, r24
    414a:	4c f5       	brge	.+82     	; 0x419e <DisplayVote+0xb26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414c:	6b 85       	ldd	r22, Y+11	; 0x0b
    414e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4150:	8d 85       	ldd	r24, Y+13	; 0x0d
    4152:	9e 85       	ldd	r25, Y+14	; 0x0e
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e2       	ldi	r20, 0x20	; 32
    415a:	51 e4       	ldi	r21, 0x41	; 65
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
    4174:	0f c0       	rjmp	.+30     	; 0x4194 <DisplayVote+0xb1c>
    4176:	88 ec       	ldi	r24, 0xC8	; 200
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	9c 83       	std	Y+4, r25	; 0x04
    417c:	8b 83       	std	Y+3, r24	; 0x03
    417e:	8b 81       	ldd	r24, Y+3	; 0x03
    4180:	9c 81       	ldd	r25, Y+4	; 0x04
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <DisplayVote+0xb0a>
    4186:	9c 83       	std	Y+4, r25	; 0x04
    4188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	9e 83       	std	Y+6, r25	; 0x06
    4192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	9e 81       	ldd	r25, Y+6	; 0x06
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	69 f7       	brne	.-38     	; 0x4176 <DisplayVote+0xafe>
    419c:	14 c0       	rjmp	.+40     	; 0x41c6 <DisplayVote+0xb4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419e:	6f 81       	ldd	r22, Y+7	; 0x07
    41a0:	78 85       	ldd	r23, Y+8	; 0x08
    41a2:	89 85       	ldd	r24, Y+9	; 0x09
    41a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	9e 81       	ldd	r25, Y+6	; 0x06
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	f1 f7       	brne	.-4      	; 0x41be <DisplayVote+0xb46>
    41c2:	9a 83       	std	Y+2, r25	; 0x02
    41c4:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1000);
		 APP_Reset ();
    41c6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <APP_Reset>
		 APP_MainMenuScrean();
    41ca:	0e 94 ed 1a 	call	0x35da	; 0x35da <APP_MainMenuScrean>

	}

	DisplayVote();
    41ce:	0e 94 3c 1b 	call	0x3678	; 0x3678 <DisplayVote>



}
    41d2:	cb 58       	subi	r28, 0x8B	; 139
    41d4:	df 4f       	sbci	r29, 0xFF	; 255
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	cf 91       	pop	r28
    41e2:	df 91       	pop	r29
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	08 95       	ret

000041ea <APP_Reset>:
/*
 * Description :
 * return votes as default
 */
void APP_Reset ()
{
    41ea:	df 93       	push	r29
    41ec:	cf 93       	push	r28
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
	vote1=0 ;
    41f2:	10 92 f0 00 	sts	0x00F0, r1
	vote2=0 ;
    41f6:	10 92 f1 00 	sts	0x00F1, r1
	vote3=0 ;
    41fa:	10 92 f2 00 	sts	0x00F2, r1
	vote4=0 ;
    41fe:	10 92 f3 00 	sts	0x00F3, r1
}
    4202:	cf 91       	pop	r28
    4204:	df 91       	pop	r29
    4206:	08 95       	ret

00004208 <main>:
#include"App.h"
#include"LCD.h"
#include<util/delay.h>

int main ( void )
{
    4208:	df 93       	push	r29
    420a:	cf 93       	push	r28
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
	APP_Init() ;
    4210:	0e 94 4d 1a 	call	0x349a	; 0x349a <APP_Init>
	APP_FirstDisplayScreen() ;
    4214:	0e 94 56 1a 	call	0x34ac	; 0x34ac <APP_FirstDisplayScreen>
    4218:	ff cf       	rjmp	.-2      	; 0x4218 <main+0x10>

0000421a <__prologue_saves__>:
    421a:	2f 92       	push	r2
    421c:	3f 92       	push	r3
    421e:	4f 92       	push	r4
    4220:	5f 92       	push	r5
    4222:	6f 92       	push	r6
    4224:	7f 92       	push	r7
    4226:	8f 92       	push	r8
    4228:	9f 92       	push	r9
    422a:	af 92       	push	r10
    422c:	bf 92       	push	r11
    422e:	cf 92       	push	r12
    4230:	df 92       	push	r13
    4232:	ef 92       	push	r14
    4234:	ff 92       	push	r15
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	ca 1b       	sub	r28, r26
    4244:	db 0b       	sbc	r29, r27
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	09 94       	ijmp

00004252 <__epilogue_restores__>:
    4252:	2a 88       	ldd	r2, Y+18	; 0x12
    4254:	39 88       	ldd	r3, Y+17	; 0x11
    4256:	48 88       	ldd	r4, Y+16	; 0x10
    4258:	5f 84       	ldd	r5, Y+15	; 0x0f
    425a:	6e 84       	ldd	r6, Y+14	; 0x0e
    425c:	7d 84       	ldd	r7, Y+13	; 0x0d
    425e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4260:	9b 84       	ldd	r9, Y+11	; 0x0b
    4262:	aa 84       	ldd	r10, Y+10	; 0x0a
    4264:	b9 84       	ldd	r11, Y+9	; 0x09
    4266:	c8 84       	ldd	r12, Y+8	; 0x08
    4268:	df 80       	ldd	r13, Y+7	; 0x07
    426a:	ee 80       	ldd	r14, Y+6	; 0x06
    426c:	fd 80       	ldd	r15, Y+5	; 0x05
    426e:	0c 81       	ldd	r16, Y+4	; 0x04
    4270:	1b 81       	ldd	r17, Y+3	; 0x03
    4272:	aa 81       	ldd	r26, Y+2	; 0x02
    4274:	b9 81       	ldd	r27, Y+1	; 0x01
    4276:	ce 0f       	add	r28, r30
    4278:	d1 1d       	adc	r29, r1
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	cd bf       	out	0x3d, r28	; 61
    4284:	ed 01       	movw	r28, r26
    4286:	08 95       	ret

00004288 <itoa>:
    4288:	fb 01       	movw	r30, r22
    428a:	9f 01       	movw	r18, r30
    428c:	e8 94       	clt
    428e:	42 30       	cpi	r20, 0x02	; 2
    4290:	c4 f0       	brlt	.+48     	; 0x42c2 <itoa+0x3a>
    4292:	45 32       	cpi	r20, 0x25	; 37
    4294:	b4 f4       	brge	.+44     	; 0x42c2 <itoa+0x3a>
    4296:	4a 30       	cpi	r20, 0x0A	; 10
    4298:	29 f4       	brne	.+10     	; 0x42a4 <itoa+0x1c>
    429a:	97 fb       	bst	r25, 7
    429c:	1e f4       	brtc	.+6      	; 0x42a4 <itoa+0x1c>
    429e:	90 95       	com	r25
    42a0:	81 95       	neg	r24
    42a2:	9f 4f       	sbci	r25, 0xFF	; 255
    42a4:	64 2f       	mov	r22, r20
    42a6:	77 27       	eor	r23, r23
    42a8:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodhi4>
    42ac:	80 5d       	subi	r24, 0xD0	; 208
    42ae:	8a 33       	cpi	r24, 0x3A	; 58
    42b0:	0c f0       	brlt	.+2      	; 0x42b4 <itoa+0x2c>
    42b2:	89 5d       	subi	r24, 0xD9	; 217
    42b4:	81 93       	st	Z+, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	a1 f7       	brne	.-24     	; 0x42a4 <itoa+0x1c>
    42bc:	16 f4       	brtc	.+4      	; 0x42c2 <itoa+0x3a>
    42be:	5d e2       	ldi	r21, 0x2D	; 45
    42c0:	51 93       	st	Z+, r21
    42c2:	10 82       	st	Z, r1
    42c4:	c9 01       	movw	r24, r18
    42c6:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <strrev>

000042ca <strrev>:
    42ca:	dc 01       	movw	r26, r24
    42cc:	fc 01       	movw	r30, r24
    42ce:	67 2f       	mov	r22, r23
    42d0:	71 91       	ld	r23, Z+
    42d2:	77 23       	and	r23, r23
    42d4:	e1 f7       	brne	.-8      	; 0x42ce <strrev+0x4>
    42d6:	32 97       	sbiw	r30, 0x02	; 2
    42d8:	04 c0       	rjmp	.+8      	; 0x42e2 <strrev+0x18>
    42da:	7c 91       	ld	r23, X
    42dc:	6d 93       	st	X+, r22
    42de:	70 83       	st	Z, r23
    42e0:	62 91       	ld	r22, -Z
    42e2:	ae 17       	cp	r26, r30
    42e4:	bf 07       	cpc	r27, r31
    42e6:	c8 f3       	brcs	.-14     	; 0x42da <strrev+0x10>
    42e8:	08 95       	ret

000042ea <__udivmodhi4>:
    42ea:	aa 1b       	sub	r26, r26
    42ec:	bb 1b       	sub	r27, r27
    42ee:	51 e1       	ldi	r21, 0x11	; 17
    42f0:	07 c0       	rjmp	.+14     	; 0x4300 <__udivmodhi4_ep>

000042f2 <__udivmodhi4_loop>:
    42f2:	aa 1f       	adc	r26, r26
    42f4:	bb 1f       	adc	r27, r27
    42f6:	a6 17       	cp	r26, r22
    42f8:	b7 07       	cpc	r27, r23
    42fa:	10 f0       	brcs	.+4      	; 0x4300 <__udivmodhi4_ep>
    42fc:	a6 1b       	sub	r26, r22
    42fe:	b7 0b       	sbc	r27, r23

00004300 <__udivmodhi4_ep>:
    4300:	88 1f       	adc	r24, r24
    4302:	99 1f       	adc	r25, r25
    4304:	5a 95       	dec	r21
    4306:	a9 f7       	brne	.-22     	; 0x42f2 <__udivmodhi4_loop>
    4308:	80 95       	com	r24
    430a:	90 95       	com	r25
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	08 95       	ret

00004312 <_exit>:
    4312:	f8 94       	cli

00004314 <__stop_program>:
    4314:	ff cf       	rjmp	.-2      	; 0x4314 <__stop_program>
